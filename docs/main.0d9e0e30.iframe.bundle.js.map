{"version":3,"sources":["webpack:///./.storybook/storybook-init-framework-entry.js","webpack:///./.storybook/generated-stories-entry.js","webpack:///\\.)(","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./stories/GettingStarted.stories.mdx","webpack:///./stories/RecipesCheckbox.stories.mdx","webpack:///./stories/RecipesDropdown.stories.mdx","webpack:///./stories/RecipesInput.stories.mdx","webpack:///./stories/RecipesRadio.stories.mdx","webpack:///./stories/RecipesSchemaBuilder.stories.mdx","webpack:///./stories/RecipesUseFormFlowItem.stories.mdx","webpack:///./stories/RecipesValidations.stories.mdx","webpack:///./react-form-flow-examples/validationRecipes/createRequiredValidation.js","webpack:///./react-form-flow-examples/validationRecipes/createMaxLengthValidation.js","webpack:///./react-form-flow-examples/AddressBook/schemaData.js","webpack:///./react-form-flow-examples/AddressBook/AddressBookForm.js","webpack:///./react-form-flow-examples/AddressBook/AddressBook.js","webpack:///./react-form-flow-examples/AddressBook/index.js","webpack:///./stories/AddressBook.stories.mdx","webpack:///./tools/helpers/components/hasValue.ts","webpack:///./tools/helpers/components/createRequiredValidation.ts","webpack:///./tools/helpers/components/createMinLengthValidation.ts","webpack:///./stories/App.tsx","webpack:///./stories/AppInteractive.tsx","webpack:///./stories/AppInteractive.stories.mdx","webpack:///./.storybook/decorators.tsx","webpack:///./.storybook/preview.ts","webpack:///./.storybook/preview.ts-generated-config-entry.js","webpack:///./react-form-flow-examples/fields/Validation.js","webpack:///./react-form-flow-examples/fields/InputField.js","webpack:///./src/react-state/Subject.ts","webpack:///./src/react-state/ObservableState.ts","webpack:///./src/react-state/useObservableState.ts","webpack:///./src/FormFlowDataContext.ts","webpack:///./src/accessor.ts","webpack:///./src/getAbsolutePath.ts","webpack:///./src/validationUtils.ts","webpack:///./src/SchemaBuilder/wrapSchemaWithValidationMethods.ts","webpack:///./src/EvaluateValidations.tsx","webpack:///./src/isValidByPaths.ts","webpack:///./src/hasPathMatched.ts","webpack:///./src/FormFlowProvider.tsx","webpack:///./src/SchemaBuilder/factoryValidate.ts","webpack:///./src/SchemaBuilder/SchemaBuilder.ts","webpack:///./src/useFormFlowValidation.ts","webpack:///./src/useFormFlowItem.ts","webpack:///./src/useFormFlow.ts","webpack:///./src/useFormFlowField.ts","webpack:///./src/useResetForm.ts","webpack:///./src/useSubmitForm.ts","webpack:///./src/index.ts","webpack:///./react-form-flow-examples/validationRecipes/hasValue.js","webpack:///./tools/helpers/components/Editor.tsx","webpack:///./stories/RecipesValidations.tsx","webpack:///./stories/RecipesSchemaBuilder.tsx"],"names":["require","configure","module","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","webpackContextKeys","Object","resolve","exports","layoutProps","MDXContent","components","props","mdxType","title","component","parentName","isMDXComponent","__page","parameters","docsOnly","componentMeta","includeStories","mdxStoryNameToKey","docs","page","mdxComponentMeta","RecipesSchemaBuilder","source","Template","args","of","name","argTypes","data","control","type","schemaData","factories","bind","schemaBuilder","storyName","storySource","createRequiredValidation","message","value","path","key","isValid","hasValue","createMaxLengthValidation","max","createMessage","length","createValidations","email","birthday","date","moment","now","valueOf","format","AddressBookFormLayout","styled","div","AddressBookForm","nameField","useFormFlowField","emailField","birthdayField","InputField","label","layout","propTypes","AddressBookLayout","AddressBook","initialState","useRef","initialData","current","defaultStory","trim","others","createMinLengthValidation","min","Layout","Validations","description","submitted","touched","Validation","errors","Form","submissionProps","useSubmitForm","console","log","resetProps","useResetForm","AppInteractive","requiredNameMessage","requiredDescriptionMessage","minNameLength","minDescriptionLength","useMemo","PropTypes","string","isRequired","number","step","Story","options","storySort","a","b","kind","includes","localeCompare","numeric","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_defineProperty","obj","defineProperty","configurable","writable","config","forEach","logger","warn","JSON","stringify","decorator","addDecorator","loader","addLoader","addParameters","_objectSpread","target","i","arguments","getOwnPropertyDescriptors","defineProperties","enhancer","addArgTypesEnhancer","addArgsEnhancer","setGlobalRender","v","LabelFeedback","isColored","ValidationLayout","section","some","Fragment","className","InputFieldLayout","labelText","field","uuid","v4","htmlFor","defaultProps","Subject","subscribe","listener","self","this","subscriber","subscribers","unsubscribe","item","next","ObservableState","initialValue","transformer","frozenValue","freeze","newValue","subject","useObservableState","observable","useState","get","state","setState","useEffect","set","context","React","createContext","create","getter","setter","EMPTY_LIST","clearIndexes","replace","add","list","derivatePaths","paths","prefix","remainingPaths","suffix","pop","_","idx","slice","interpolatePathsByPaths","rawValidationPaths","jsonPath","nestedPaths","split","reverse","parentPath","invalidationPaths","validations","validate","checkValidation","wrapSchemaWithValidationMethods","schema","cache","validateData","allPaths","interpolatePaths","validationsState","allValidations","byPath","validateDataAt","validation","pathIndexesCleared","validateAt","dependencies","undefined","dependencyValues","previousValidations","cacheAtPath","ancestorsPathParts","indexesMatches","match","indexes","concat","invalidationPath","absolutePath","getAbsolutePath","matched","totalAncestorTokens","join","reduce","finalPath","indexValue","index","Array","from","currentDependencyValues","isOverallChanged","EvaluateValidations","observableState","useContext","FormFlowDataContext","values","globalValidationCached","isValidByPaths","validationPath","internalPath","hasPathMatched","FormFlowProvider","children","isSubmitted","initialDataRef","schemaDataRef","submitCount","dirty","initialValues","isAllValid","Boolean","useCallback","Provider","memo","defaultResponse","factoryValidate","validationName","response","EMPTY_OBJECT","builder","instance","build","with","validationMethods","newBuilder","check","end","test","entries","method","input","extraArguments","factory","defaultExtraArgs","factoryValidationInternal","remainingArguments","internalArgs","purge","validationNames","validationNamesToRemove","getPurgedList","isArray","removed","ACCEPTABLE_TYPES","getBooleanFromMapPath","possibleBoolean","isFormDirty","isFormTouched","useFormFlowValidation","metadata","mapDirty","mapTouched","isArrayWithNoIndex","initialMapDirty","initialMapTouched","useFormFlowItem","setMetadata","useFormFlow","onBlurByPath","oldData","onChangeByPath","oldValue","isDirtyOld","isDirty","setData","oldMetadata","onChangeValue","onBlur","onChange","Types","DEFAULT_OPTIONS","eventType","metadataOptions","blur","change","changeValue","blurForm","changeForm","changeValueForm","val","ref","onReset","reset","submit","onSubmit","preventDefault","Editor","onValueChange","highlight","languages","javascript","padding","style","fontFamily","fontSize","UpdateData","ValidationsLayout","Set","RecipesValidations","shape","decode","text","parser","document","createElement","innerHTML","textContent","dataProps","schemaDataProps","_schemaData","set_schemaData","schemaDataObject","Function","getSchemaData","SchemaBuilder","_schemaDataObjectSaved","set_schemaDataObjectSaved","onUpdateCode","setTimeout","onClick"],"mappings":"klBAAA,sE,gGCAA,kBAKA,EAH2BA,oBAAQ,MAGVC,WAAW,CAACD,2BAAoJE,QAAQ,K,+FCLjM,IAAIC,IAAM,CACT,oCAAqC,KACrC,uCAAwC,KACxC,uCAAwC,KACxC,wCAAyC,KACzC,wCAAyC,KACzC,qCAAsC,KACtC,qCAAsC,KACtC,6CAA8C,KAC9C,+CAAgD,KAChD,2CAA4C,MAI7C,SAASC,eAAeC,KACvB,IAAIC,GAAKC,sBAAsBF,KAC/B,OAAOG,oBAAoBF,IAE5B,SAASC,sBAAsBF,KAC9B,IAAIG,oBAAoBC,EAAEN,IAAKE,KAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,IAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,IAAIE,KAEZD,eAAeS,KAAO,SAASC,qBAC9B,OAAOC,OAAOF,KAAKV,MAEpBC,eAAeY,QAAUT,sBACzBL,OAAOe,QAAUb,eACjBA,eAAeE,GAAK,M,kDC/BpB,IAAIH,IAAM,CACT,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,gBAAiB,KACjB,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,UAAW,KACX,aAAc,KACd,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,UAAW,KACX,aAAc,KACd,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAA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","file":"main.0d9e0e30.iframe.bundle.js","sourcesContent":["import '@storybook/react';","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('..', true, /^\\.\\/(?:(src|stories)(?:\\/(?!\\.)(?:(?:(?!(?:^|\\/)\\.).)*?)\\/|\\/|$)(?!\\.)(?=.)[^/]*?\\.stories\\.(ts|tsx|js|jsx|mdx))$/)], module, false);","var map = {\n\t\"./stories/AddressBook.stories.mdx\": 2651,\n\t\"./stories/AppInteractive.stories.mdx\": 2653,\n\t\"./stories/GettingStarted.stories.mdx\": 2638,\n\t\"./stories/RecipesCheckbox.stories.mdx\": 2639,\n\t\"./stories/RecipesDropdown.stories.mdx\": 2642,\n\t\"./stories/RecipesInput.stories.mdx\": 2643,\n\t\"./stories/RecipesRadio.stories.mdx\": 2644,\n\t\"./stories/RecipesSchemaBuilder.stories.mdx\": 2645,\n\t\"./stories/RecipesUseFormFlowItem.stories.mdx\": 2646,\n\t\"./stories/RecipesValidations.stories.mdx\": 2647\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2632;","var map = {\n\t\"./af\": 1513,\n\t\"./af.js\": 1513,\n\t\"./ar\": 1514,\n\t\"./ar-dz\": 1515,\n\t\"./ar-dz.js\": 1515,\n\t\"./ar-kw\": 1516,\n\t\"./ar-kw.js\": 1516,\n\t\"./ar-ly\": 1517,\n\t\"./ar-ly.js\": 1517,\n\t\"./ar-ma\": 1518,\n\t\"./ar-ma.js\": 1518,\n\t\"./ar-sa\": 1519,\n\t\"./ar-sa.js\": 1519,\n\t\"./ar-tn\": 1520,\n\t\"./ar-tn.js\": 1520,\n\t\"./ar.js\": 1514,\n\t\"./az\": 1521,\n\t\"./az.js\": 1521,\n\t\"./be\": 1522,\n\t\"./be.js\": 1522,\n\t\"./bg\": 1523,\n\t\"./bg.js\": 1523,\n\t\"./bm\": 1524,\n\t\"./bm.js\": 1524,\n\t\"./bn\": 1525,\n\t\"./bn.js\": 1525,\n\t\"./bo\": 1526,\n\t\"./bo.js\": 1526,\n\t\"./br\": 1527,\n\t\"./br.js\": 1527,\n\t\"./bs\": 1528,\n\t\"./bs.js\": 1528,\n\t\"./ca\": 1529,\n\t\"./ca.js\": 1529,\n\t\"./cs\": 1530,\n\t\"./cs.js\": 1530,\n\t\"./cv\": 1531,\n\t\"./cv.js\": 1531,\n\t\"./cy\": 1532,\n\t\"./cy.js\": 1532,\n\t\"./da\": 1533,\n\t\"./da.js\": 1533,\n\t\"./de\": 1534,\n\t\"./de-at\": 1535,\n\t\"./de-at.js\": 1535,\n\t\"./de-ch\": 1536,\n\t\"./de-ch.js\": 1536,\n\t\"./de.js\": 1534,\n\t\"./dv\": 1537,\n\t\"./dv.js\": 1537,\n\t\"./el\": 1538,\n\t\"./el.js\": 1538,\n\t\"./en-SG\": 1539,\n\t\"./en-SG.js\": 1539,\n\t\"./en-au\": 1540,\n\t\"./en-au.js\": 1540,\n\t\"./en-ca\": 1541,\n\t\"./en-ca.js\": 1541,\n\t\"./en-gb\": 1542,\n\t\"./en-gb.js\": 1542,\n\t\"./en-ie\": 1543,\n\t\"./en-ie.js\": 1543,\n\t\"./en-il\": 1544,\n\t\"./en-il.js\": 1544,\n\t\"./en-nz\": 1545,\n\t\"./en-nz.js\": 1545,\n\t\"./eo\": 1546,\n\t\"./eo.js\": 1546,\n\t\"./es\": 1547,\n\t\"./es-do\": 1548,\n\t\"./es-do.js\": 1548,\n\t\"./es-us\": 1549,\n\t\"./es-us.js\": 1549,\n\t\"./es.js\": 1547,\n\t\"./et\": 1550,\n\t\"./et.js\": 1550,\n\t\"./eu\": 1551,\n\t\"./eu.js\": 1551,\n\t\"./fa\": 1552,\n\t\"./fa.js\": 1552,\n\t\"./fi\": 1553,\n\t\"./fi.js\": 1553,\n\t\"./fo\": 1554,\n\t\"./fo.js\": 1554,\n\t\"./fr\": 1555,\n\t\"./fr-ca\": 1556,\n\t\"./fr-ca.js\": 1556,\n\t\"./fr-ch\": 1557,\n\t\"./fr-ch.js\": 1557,\n\t\"./fr.js\": 1555,\n\t\"./fy\": 1558,\n\t\"./fy.js\": 1558,\n\t\"./ga\": 1559,\n\t\"./ga.js\": 1559,\n\t\"./gd\": 1560,\n\t\"./gd.js\": 1560,\n\t\"./gl\": 1561,\n\t\"./gl.js\": 1561,\n\t\"./gom-latn\": 1562,\n\t\"./gom-latn.js\": 1562,\n\t\"./gu\": 1563,\n\t\"./gu.js\": 1563,\n\t\"./he\": 1564,\n\t\"./he.js\": 1564,\n\t\"./hi\": 1565,\n\t\"./hi.js\": 1565,\n\t\"./hr\": 1566,\n\t\"./hr.js\": 1566,\n\t\"./hu\": 1567,\n\t\"./hu.js\": 1567,\n\t\"./hy-am\": 1568,\n\t\"./hy-am.js\": 1568,\n\t\"./id\": 1569,\n\t\"./id.js\": 1569,\n\t\"./is\": 1570,\n\t\"./is.js\": 1570,\n\t\"./it\": 1571,\n\t\"./it-ch\": 1572,\n\t\"./it-ch.js\": 1572,\n\t\"./it.js\": 1571,\n\t\"./ja\": 1573,\n\t\"./ja.js\": 1573,\n\t\"./jv\": 1574,\n\t\"./jv.js\": 1574,\n\t\"./ka\": 1575,\n\t\"./ka.js\": 1575,\n\t\"./kk\": 1576,\n\t\"./kk.js\": 1576,\n\t\"./km\": 1577,\n\t\"./km.js\": 1577,\n\t\"./kn\": 1578,\n\t\"./kn.js\": 1578,\n\t\"./ko\": 1579,\n\t\"./ko.js\": 1579,\n\t\"./ku\": 1580,\n\t\"./ku.js\": 1580,\n\t\"./ky\": 1581,\n\t\"./ky.js\": 1581,\n\t\"./lb\": 1582,\n\t\"./lb.js\": 1582,\n\t\"./lo\": 1583,\n\t\"./lo.js\": 1583,\n\t\"./lt\": 1584,\n\t\"./lt.js\": 1584,\n\t\"./lv\": 1585,\n\t\"./lv.js\": 1585,\n\t\"./me\": 1586,\n\t\"./me.js\": 1586,\n\t\"./mi\": 1587,\n\t\"./mi.js\": 1587,\n\t\"./mk\": 1588,\n\t\"./mk.js\": 1588,\n\t\"./ml\": 1589,\n\t\"./ml.js\": 1589,\n\t\"./mn\": 1590,\n\t\"./mn.js\": 1590,\n\t\"./mr\": 1591,\n\t\"./mr.js\": 1591,\n\t\"./ms\": 1592,\n\t\"./ms-my\": 1593,\n\t\"./ms-my.js\": 1593,\n\t\"./ms.js\": 1592,\n\t\"./mt\": 1594,\n\t\"./mt.js\": 1594,\n\t\"./my\": 1595,\n\t\"./my.js\": 1595,\n\t\"./nb\": 1596,\n\t\"./nb.js\": 1596,\n\t\"./ne\": 1597,\n\t\"./ne.js\": 1597,\n\t\"./nl\": 1598,\n\t\"./nl-be\": 1599,\n\t\"./nl-be.js\": 1599,\n\t\"./nl.js\": 1598,\n\t\"./nn\": 1600,\n\t\"./nn.js\": 1600,\n\t\"./pa-in\": 1601,\n\t\"./pa-in.js\": 1601,\n\t\"./pl\": 1602,\n\t\"./pl.js\": 1602,\n\t\"./pt\": 1603,\n\t\"./pt-br\": 1604,\n\t\"./pt-br.js\": 1604,\n\t\"./pt.js\": 1603,\n\t\"./ro\": 1605,\n\t\"./ro.js\": 1605,\n\t\"./ru\": 1606,\n\t\"./ru.js\": 1606,\n\t\"./sd\": 1607,\n\t\"./sd.js\": 1607,\n\t\"./se\": 1608,\n\t\"./se.js\": 1608,\n\t\"./si\": 1609,\n\t\"./si.js\": 1609,\n\t\"./sk\": 1610,\n\t\"./sk.js\": 1610,\n\t\"./sl\": 1611,\n\t\"./sl.js\": 1611,\n\t\"./sq\": 1612,\n\t\"./sq.js\": 1612,\n\t\"./sr\": 1613,\n\t\"./sr-cyrl\": 1614,\n\t\"./sr-cyrl.js\": 1614,\n\t\"./sr.js\": 1613,\n\t\"./ss\": 1615,\n\t\"./ss.js\": 1615,\n\t\"./sv\": 1616,\n\t\"./sv.js\": 1616,\n\t\"./sw\": 1617,\n\t\"./sw.js\": 1617,\n\t\"./ta\": 1618,\n\t\"./ta.js\": 1618,\n\t\"./te\": 1619,\n\t\"./te.js\": 1619,\n\t\"./tet\": 1620,\n\t\"./tet.js\": 1620,\n\t\"./tg\": 1621,\n\t\"./tg.js\": 1621,\n\t\"./th\": 1622,\n\t\"./th.js\": 1622,\n\t\"./tl-ph\": 1623,\n\t\"./tl-ph.js\": 1623,\n\t\"./tlh\": 1624,\n\t\"./tlh.js\": 1624,\n\t\"./tr\": 1625,\n\t\"./tr.js\": 1625,\n\t\"./tzl\": 1626,\n\t\"./tzl.js\": 1626,\n\t\"./tzm\": 1627,\n\t\"./tzm-latn\": 1628,\n\t\"./tzm-latn.js\": 1628,\n\t\"./tzm.js\": 1627,\n\t\"./ug-cn\": 1629,\n\t\"./ug-cn.js\": 1629,\n\t\"./uk\": 1630,\n\t\"./uk.js\": 1630,\n\t\"./ur\": 1631,\n\t\"./ur.js\": 1631,\n\t\"./uz\": 1632,\n\t\"./uz-latn\": 1633,\n\t\"./uz-latn.js\": 1633,\n\t\"./uz.js\": 1632,\n\t\"./vi\": 1634,\n\t\"./vi.js\": 1634,\n\t\"./x-pseudo\": 1635,\n\t\"./x-pseudo.js\": 1635,\n\t\"./yo\": 1636,\n\t\"./yo.js\": 1636,\n\t\"./zh-cn\": 1637,\n\t\"./zh-cn.js\": 1637,\n\t\"./zh-hk\": 1638,\n\t\"./zh-hk.js\": 1638,\n\t\"./zh-tw\": 1639,\n\t\"./zh-tw.js\": 1639\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2635;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Docs/Getting Started\" component={() => <div />} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <p><inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{` as its name describes is a library to define a common and automated workflow to collect and validate form data. Allow user to consume the data and validation based on the json path.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-use-it\"\n    }}>{`How to use it`}</h2>\n    <p>{`Define your form data wrapping with the container below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import FormFlowProvider from 'react-form-flow';\n// or\nimport { FormFlowProvider } from 'react-form-flow';\n`}</code></pre>\n    <p>{`Use hooks to get values, event handler and validations.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useFormFlowField, useFormFlowValidation } from 'react-form-flow';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"first-steps\"\n    }}>{`First Steps`}</h2>\n    <p>{`To improve your productivity, it would be good to create your core form components such as input, dropdowns and on and on following the `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{` spec.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/pensive-paper-sgykr\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Code Sandbox Example`}</a></p>\n    <p>{`We also have an older version using a `}<a parentName=\"p\" {...{\n        \"href\": \"?path=/docs/docs-recipes-useformflowitem--page\"\n      }}>{`base hooks`}</a>{`, it is useful for more advanced and custom usage. In most of the form cases, the current documentation is better option.`}</p>\n    <p><em parentName=\"p\">{`JSON PATH`}</em>{` is a notation to navigate through the JSON object.`}</p>\n    <p>{`e.g.`}</p>\n    <p><strong parentName=\"p\">{`src/initialData.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default {\n    person: {\n      id: 1,\n      name: 'Jane Doe',\n      email: 'jane@doe.dead'\n      children:[\n        {id: 2, name: 'John Doe'}\n      ]\n    }\n};\n`}</code></pre>\n    <p>{`Note: observing the json above, the json path to access the name of first child is `}<inlineCode parentName=\"p\">{`\"person.chidlren[0].name\"`}</inlineCode>{`. Although this first tutorial won't\ncover arrays, you can access the `}<a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/pensive-paper-sgykr\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Code Sandbox Example`}</a>{` to understand it.`}</p>\n    <p><strong parentName=\"p\">{`src/ValidationResult.jsx`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\n\nexport default function ValidationResult({ errors }) {\n  return (\n    <section>\n      {validations.map((validation) => <div key={validation.key}>{JSON.stringify(validation, null, 2)}</div>)}\n    </section>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"inputfield\"\n    }}>{`InputField`}</h3>\n    <p>{`The input field could receive from the `}<inlineCode parentName=\"p\">{`useFormFlowField`}</inlineCode>{` an object with the spec below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface FormFlowField {\n  dirty: boolean;\n  errors: Array<Validation>;\n  field: FieldMetadata;\n  submitted: boolean;\n  touched: boolean;\n}\n`}</code></pre>\n    <p>{`Validation returned can match whatever you want, for the sake of standard, let's always return this below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Validation {\n  data: object;\n  dependencies: any[];\n  get: (data: Object, path: string) => any;\n  key: string;\n  isValid: boolean;\n  name: string;\n  path: string;\n  value: any;\n}\n`}</code></pre>\n    <p>{`And, finally, the field would have these properties.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface FieldMetadata {\n  /**\n   * Depending on the eventType passed to useFormFlowField, it returns\n   * either onChange or onChangeValue.\n   * */\n  onChange(e: Event): void;\n  onChangeValue(value: any): void;\n  /**\n   * Common properties\n   * */\n  onBlur(e: Event): void;\n  value: any;\n}\n`}</code></pre>\n    <p>{`Component...`}</p>\n    <p><strong parentName=\"p\">{`src/InputField.jsx`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport ValidationResult from './ValidationResult';\n\nexport default function InputField({\n  errors,\n  field,\n  label,\n  touched,\n  submitted,\n  value,\n}) {\n  return (\n    <div>\n      <div>{label}</div>\n      <input type=\"text\" {...field} />\n      <div>\n        {(submitted || touched) && <ValidationResult validations={errors} />}\n      </div>\n    </div>\n  );\n}\n\nInputField.defaultProps = {\n  value: '',\n};\n`}</code></pre>\n    <p><strong parentName=\"p\">{`src/form/SchemaBuilder.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { SchemaBuilder } from 'react-form-flow';\n\nfunction hasValue(value) {\n  return (\n    value !== null && value !== undefined && (typeof value !== 'string' || (value && value.trim()))\n  );\n}   \n/** \n * Once you factory it, you can use as many times as you want via \"check\"\n **/\nSchemaBuilder.factory(\"required\", (metadata) => hasValue(metadata.value));\nSchemaBuilder.factory(\"min-length\", (metadata) => {\n  const value = metadata.value ?? \"\";\n  const isValid = value.trim().length >= metadata.min;\n  return isValid;\n});\nSchemaBuilder.factory(\"max-length\", (metadata) => {\n  const value = metadata.value ?? \"\";\n  const isValid = value.trim().length <= metadata.max;\n  return isValid;\n});\n\nexport default SchemaBuilder;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`src/schemaData.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import SchemaBuilder from './form/SchemaBuilder';\n\n/** \n * Adding more metadata to the Validation result object\n */\nfunction getLength(metadata) {\n  const { length } = (metadata.value ?? \"\").trim();\n  return { length };\n}\n\nexport default SchemaBuilder.builer()\n  .with(\"name\")\n  .check(\"required\")\n  .check(\"min-length\", { min: 5, response: getLength })\n  .check(\"max-length\", { max: 50, response: getLength })\n  .end()\n  .with(\"email\")\n  .check(\"required\")\n  .check(\"min-length\", { min: 10, response: getLength })\n  .check(\"max-length\", { max: 250, response: getLength })\n  /** \n   * If the validation is one-time used, you can create it on the fly\n   * using \"test\"\n   */\n  .test(\"invalid\", (metadata) => {\n    const value = metadata.value ?? \"\";\n    const isValid = /^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,4})+$/.test(value);\n    return isValid;\n  })\n  .end()\n  .build()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"app\"\n    }}>{`App`}</h4>\n    <p>{`A few things are required in order to use the `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{` library.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`initialData: the initial data to be rendered in the form`}</li>\n      <li parentName=\"ul\">{`schemaData: an object with validation rules per json path`}</li>\n      <li parentName=\"ul\">{`children: the react node being wrapped by the provider containing the real form within fields`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\n// eslint-disable-next-line\nimport styled from 'styled-components';\nimport {\n  createValidations,\n  FormFlowProvider,\n  useFormFlowField,\n  useFormFlowValidation,\n} from 'react-form-flow';\nimport Validation from './Validation';\nimport InputField from './InputField';\nimport schemaData from './schemaData';\nimport initialData from './initialData';\n\nconst Layout = styled.div\\`\n  height: 100%;\n  width: 100%;\n\n  display: grid;\n\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto;\n\\`;\n\nfunction Form() {\n  const name = useFormFlowField('name');\n  const email = useFormFlowField('email');\n\n  return (\n    <div>\n      <InputField label=\"Name\" {...name} />\n      <InputField label=\"Email\" {...email} />\n    </div>\n  );\n}\n\nfunction DemoApp() {\n  return (\n    <Layout>\n      <FormFlowProvider initialData={initialData} schemaData={schemaData}>\n        <Form />\n      </FormFlowProvider>\n    </Layout>\n  );\n}\n`}</code></pre>\n    <p>{`Running...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<DemoApp />\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Docs/Getting Started', component: () => <div />, includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\nimport RecipesSchemaBuilder, { decode, data } from './RecipesSchemaBuilder'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Docs/Recipes/Elements/Checkbox\" component={RecipesSchemaBuilder} parameters={{\n      docs: {\n        source: {\n          code: \"\"\n        }\n      }\n    }} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"recipes\"\n    }}>{`Recipes`}</h1>\n    <p>{`How to build specific form elements to use the hooks provided by `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"checkbox-field\"\n    }}>{`Checkbox Field`}</h2>\n    <p>{`This recipe will show how to build a group/simple checkbox using the `}<inlineCode parentName=\"p\">{`input[type=\"checkbox\"]`}</inlineCode>{` markup following the interface defined by `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <p>{`Here, we are using `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.styled-components.com/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`styled-components`}</a>{` for prettifying styles.`}</p>\n    <p><strong parentName=\"p\">{`src/ValidationResult.jsx`}</strong></p>\n    <p>{`You will probably need a component to display the validations, see the draft below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport styled from 'styled-components';\n\nconst ValidationResultLayout = styled.section\\`\n  .ValidationResultLayout__message {\n    color: red;\n  }\n\\`;\n\nexport default function ValidationResult({ errors = [] }) {\n  return (\n    <ValidationResultLayout>\n      {validations.map(\n        (validation) =>(\n          <div className=\"ValidationResultLayout__message\" key={validation.key}>\n            {JSON.stringify(validation, null, 2)}\n          </div>\n        )\n      )}\n    </ValidationResultLayout>\n  );\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`src/CheckboxField.jsx`}</strong></p>\n    <p>{`Here, validations are received always and the consumer decides when to display them.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: For this case, we are displaying the validations straightaway, but, nothing block you to pass some property to control as it will be displayed. e.g. `}<inlineCode parentName=\"p\">{`showValidation`}</inlineCode>{` when the form is submitted, then, it would be able to display by `}<inlineCode parentName=\"p\">{`{showValidation && <ValidationResult validations={validations} />}`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useCallback, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport styled from 'styled-components';\nimport ValidationResult from './ValidationResult';\n\nconst CheckboxFieldLayout = styled.div\\`\n  padding: 0 0 10px 0;\n  display: grid;\n  grid-template-columns: min-content;\n  grid-template-rows: min-content auto;\n\n  label {\n    display: grid;\n    grid-template-columns: min-content min-content;\n    grid-template-rows: auto;\n    white-space: nowrap;\n    grid-gap: 10px;\n  }\n\n  .CheckboxFieldLayout__validations {\n    display: block;\n    white-space: nowrap;\n  }\n\\`;\n\nexport default function CheckboxField({\n  checkedValue,\n  errors,\n  field,\n  label: labelText,\n  submitted,\n  touched,\n}) {\n  const id = useRef(uuid.v4());\n  const { onBlur, onChangeValue, value = '' } = field;\n  const onChange = useCallback(() => {\n    const treatedValue = value || [];\n    const hasValue = treatedValue.includes(checkedValue);\n    const newValue = hasValue\n      ? treatedValue.filter(val => val !== checkedValue)\n      : treatedValue.concat(checkedValue);\n\n    onChangeValue(newValue);\n  }, [checkedValue, onChangeValue, value]);\n\n  return (\n    <CheckboxFieldLayout>\n      <label htmlFor={id.current}>\n        <span>{labelText}</span>\n        <input\n          id={id.current}\n          type=\"checkbox\"\n          onBlur={onBlur}\n          onChange={onChange}\n          checked={(value || []).includes(checkedValue)}\n        />\n      </label>\n      <div className=\"CheckboxFieldLayout__validations\">\n        {(submitted || touched) && <ValidationResult errors={errors} />}\n      </div>\n    </CheckboxFieldLayout>\n  );\n}\n\n\nCheckboxField.defaultProps = {\n  label: null,\n  errors: []\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-the-checkboxfield\"\n    }}>{`Using the CheckboxField`}</h2>\n    <p>{`After building the Checkbox, see below how to use it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport styled from 'styled-components';\nimport { useFormFlowField } from 'react-form-flow';\nimport CheckboxField from './CheckboxField';\n\nconst CheckboxFieldRecipeLayout = styled.div\\`\\`;\n\nexport default function CheckboxFieldRecipe() {\n  const skillsField = useFormFlowField('skills', { eventType: 'value' });\n\n  return (\n    <CheckboxFieldRecipeLayout>\n      <h2>Interact with the checkboxes below by clicking...</h2>\n      <fieldset>\n        <legend>Skills</legend>\n        <CheckboxField {...skillsField} label=\"Reading\" checkedValue=\"reading\" />\n        <CheckboxField {...skillsField} label=\"Strategic View\" checkedValue=\"strategic_view\" />\n        <CheckboxField {...skillsField} label=\"Cooking\" checkedValue=\"cooking\" />\n        <CheckboxField {...skillsField} label=\"Playing football\" checkedValue=\"football\" />\n        <span>\n          value:\n          {JSON.stringify(skillsField.value)}\n        </span>\n      </fieldset>\n    </CheckboxFieldRecipeLayout>\n  );\n}\n`}</code></pre>\n    <p>{`And then...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`  import { FormFlowProvider } from 'react-form-flow';\n\n  const initialData = { ... };\n  const schemaData = { ... };\n\n  // ...\n\n  <FormFlowProvider initialData={initialData} schemaData={schemaData}>\n    <CheckboxFieldRecipe />\n  </FormFlowProvider>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Docs/Recipes/Elements/Checkbox', parameters: {\n  docs: {\n    source: {\n      code: \"\"\n    }\n  }\n}, component: RecipesSchemaBuilder, includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\nimport RecipesSchemaBuilder, { decode, data } from './RecipesSchemaBuilder'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Docs/Recipes/Elements/Dropdown\" component={RecipesSchemaBuilder} parameters={{\n      docs: {\n        source: {\n          code: \"\"\n        }\n      }\n    }} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"recipes\"\n    }}>{`Recipes`}</h1>\n    <p>{`How to build specific form elements to use the hooks provided by `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"dropdown-field-recipe\"\n    }}>{`Dropdown Field Recipe`}</h2>\n    <p>{`This recipe will show how to build a simple dropdown using the select markup following the interface defined by `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <p>{`Here, we are using `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.styled-components.com/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`styled-components`}</a>{` for prettifying styles.`}</p>\n    <p><strong parentName=\"p\">{`src/ValidationResult.jsx`}</strong></p>\n    <p>{`You will probably need a component to display the validations, see the draft below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport styled from 'styled-components';\n\nconst ValidationResultLayout = styled.section\\`\n  .ValidationResultLayout__message {\n    color: red;\n  }\n\\`;\n\nexport default function ValidationResult({ errors = [] }) {\n  return (\n    <ValidationResultLayout>\n      {validations.map(\n        (validation) =>(\n          <div className=\"ValidationResultLayout__message\" key={validation.key}>\n            {JSON.stringify(validation, null, 2)}\n          </div>\n        )\n      )}\n    </ValidationResultLayout>\n  );\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`src/DropdownField.jsx`}</strong></p>\n    <p>{`Here, validations are received always and the consumer decides when to display them.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: For this case, we are only displaying after visiting the field, but, nothing block you to pass another property `}<inlineCode parentName=\"p\">{`showValidation`}</inlineCode>{` when the form is submitted, then, it would be able to display by `}<inlineCode parentName=\"p\">{`{(isVisited || showValidation) && <ValidationResult validations={validations} />}`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useCallback, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport styled from 'styled-components';\nimport ValidationResult from './ValidationResult';\n\nconst DropdownFieldLayout = styled.div\\`\n  padding: 0 0 10px 0;\n  display: grid;\n  grid-template-columns: min-content;\n  grid-template-rows: min-content auto;\n\n  label {\n    display: grid;\n    grid-template-columns: min-content;\n    grid-template-rows: min-content min-content min-content;\n    white-space: nowrap;\n    grid-gap: 10px;\n  }\n\n  .DropdownFieldLayout__validations {\n    display: block;\n    white-space: nowrap;\n  }\n\\`;\n\nexport default function DropdownField({\n  empty,\n  dirty,\n  errors,\n  field,\n  formatText,\n  formatValue,\n  label: labelText,\n  options,\n  submtted,\n  touched,\n}) {\n  const id = useRef(uuid.v4());\n  const { onBlur, onChangeValue, value = '' } = field;\n  const [isVisited, setIsVisited] = useState(false);\n  const onChange = useCallback(\n    e => {\n      const { value: optionValue } = e.target;\n\n      onChangeValue(options.find(option => formatValue(option) === optionValue) || null);\n    },\n    [formatValue, onChangeValue, options]\n  );\n\n  return (\n    <DropdownFieldLayout>\n      <label htmlFor={id.current}>\n        <span>{labelText}</span>\n        <select onBlur={onBlur} onChange={onChange} value={formatValue(value)}>\n          {empty && <option value={formatValue(empty)}>{formatText(empty)}</option>}\n          {Boolean(options && options.length) &&\n            options.map(option => {\n              const text = formatText(option);\n              const optionValue = formatValue(option);\n\n              return <option value={optionValue}>{text}</option>;\n            })}\n        </select>\n      </label>\n      <div className=\"DropdownFieldLayout__validations\">\n        {(submitted || dirty || touched) && <ValidationResult errors={errors} />}\n      </div>\n    </DropdownFieldLayout>\n  );\n}\n\nDropdownField.defaultProps = {\n  empty: null,\n  label: null,\n  errors: [],\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-the-dropdownfield\"\n    }}>{`Using the DropdownField`}</h2>\n    <p>{`After building the Dropdown, see below how to use it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport styled from 'styled-components';\nimport { useFormFlowField } from 'react-form-flow';\nimport DropdownField from './DropdownField';\n\nconst DropdownFieldRecipeLayout = styled.div\\`\\`;\n\nconst countries = [\n  { id: 'br', name: 'Brazil' },\n  { id: 'ie', name: 'Ireland' },\n  { id: 'it', name: 'Italy' },\n  { id: 'sp', name: 'Spain' },\n  { id: 'uk', name: 'United Kingdom' },\n  { id: 'fr', name: 'France' },\n  { id: 'us', name: 'United States' },\n];\nconst empty = { id: '', name: 'Select your country' };\n\nfunction formatValue(item) {\n  const { id } = item || {};\n\n  return id;\n}\n\nfunction formatText(item) {\n  const { name } = item || {};\n\n  return name;\n}\n\nexport default function DropdownFieldRecipe() {\n  const nationalityField = useFormFlowField('nationality', { eventType: 'value' });\n\n  return (\n    <DropdownFieldRecipeLayout>\n      <h2>Interact with dropdown below by selecting a value...</h2>\n\n      <DropdownField\n        {...nationalityField}\n        empty={empty}\n        label=\"Nationality\"\n        options={countries}\n        formatValue={formatValue}\n        formatText={formatText}\n      />\n      <div>\n        {!nationalityField.value && <strong>No value selected yet.</strong>}\n        {nationalityField.value && (\n          <div>\n            <strong>Value:</strong>\n            <span>{JSON.stringify(nationalityField.value)}</span>\n          </div>\n        )}\n      </div>\n    </DropdownFieldRecipeLayout>\n  );\n}\n`}</code></pre>\n    <p>{`And then...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`  import { FormFlowProvider } from 'react-form-flow';\n\n  const initialData = { ... };\n  const schemaData = { ... };\n\n  // ...\n\n  <FormFlowProvider initialData={initialData} schemaData={schemaData}>\n    <DropdownFieldRecipe />\n  </FormFlowProvider>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Docs/Recipes/Elements/Dropdown', parameters: {\n  docs: {\n    source: {\n      code: \"\"\n    }\n  }\n}, component: RecipesSchemaBuilder, includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\nimport RecipesSchemaBuilder, { decode, data } from './RecipesSchemaBuilder'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Docs/Recipes/Elements/Input\" component={RecipesSchemaBuilder} parameters={{\n      docs: {\n        source: {\n          code: \"\"\n        }\n      }\n    }} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"recipes\"\n    }}>{`Recipes`}</h1>\n    <p>{`How to build specific form elements to use the hooks provided by `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"input-field-recipe\"\n    }}>{`Input Field Recipe`}</h2>\n    <p>{`The idea here is to show how to optimise your performance by reusing a input field.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <p>{`Here, we are using `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.styled-components.com/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`styled-components`}</a>{` for prettifying styles.`}</p>\n    <p><strong parentName=\"p\">{`src/ValidationResult.jsx`}</strong></p>\n    <p>{`You will probably need a component to display the validations, see the draft below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport styled from 'styled-components';\n\nconst ValidationResultLayout = styled.section\\`\n  .ValidationResultLayout__message {\n    color: red;\n  }\n\\`;\n\nexport default function ValidationResult({ errors = [] }) {\n  return (\n    <ValidationResultLayout>\n      {validations.map(\n        (validation) =>(\n          <div className=\"ValidationResultLayout__message\" key={validation.key}>\n            {JSON.stringify(validation, null, 2)}\n          </div>\n        )\n      )}\n    </ValidationResultLayout>\n  );\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`src/InputField.jsx`}</strong></p>\n    <p>{`In the case below, validations are received always and the consumer decides when to display them.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: For this case, we are only displaying after visiting the field, but, nothing block you to pass another property `}<inlineCode parentName=\"p\">{`showValidation`}</inlineCode>{` when the form is submitted, then, it would be able to display by `}<inlineCode parentName=\"p\">{`{(isVisited || showValidation) && <ValidationResult validations={validations} />}`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useCallback, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport styled from 'styled-components';\nimport ValidationResult from './ValidationResult';\n\nconst InputFieldLayout = styled.div\\`\n  padding: 0 0 10px 0;\n  label > span {\n    display: block;\n  }\n  .InputFieldLayout__validations {\n    display: block;\n  }\n\\`;\n\nexport default function InputField(props) {\n  const {\n    errors,\n    field,\n    label: labelText,\n    submitted,\n    touched,\n  } = props\n  const id = useRef(uuid.v4());\n\n  return (\n    <InputFieldLayout>\n      <label htmlFor={id.current}>\n        <span>{labelText}</span>\n        <input id={id.current} type=\"text\" {...field} />\n      </label>\n      <div className=\"InputFieldLayout__validations\">\n        {(submitted || touched) && <ValidationResult errors={errors} />}\n      </div>\n    </InputFieldLayout>\n  );\n}\n\nInputField.defaultProps = {\n  label: null,\n  errors: [],\n  value: '',\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-the-inputfield\"\n    }}>{`Using the InputField`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useCallback, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport { useFormFlowField } from 'react-form-flow';\n\nconst InputFieldRecipeLayout = styled.div\\`\n  width: 100%;\n\\`;\n\nexport default function InputFieldRecipe() {\n  const nameField = useFormFlowField('name');\n\n  return (\n    <InputFieldRecipeLayout>\n      <h2>Interact with the input field by focusing and leaving the field...</h2>\n\n      <InputField {...nameField} label=\"Name\" />\n      <div>{nameField.value}</div>\n    </InputFieldRecipeLayout>\n  );\n}\n`}</code></pre>\n    <p>{`And then...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`  import { FormFlowProvider } from 'react-form-flow';\n\n  const initialData = { ... };\n  const schemaData = { ... };\n\n  // ...\n\n  <FormFlowProvider initialData={initialData} schemaData={schemaData}>\n    <InputFieldRecipe />\n  </FormFlowProvider>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Docs/Recipes/Elements/Input', parameters: {\n  docs: {\n    source: {\n      code: \"\"\n    }\n  }\n}, component: RecipesSchemaBuilder, includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\nimport RecipesSchemaBuilder, { decode, data } from './RecipesSchemaBuilder'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Docs/Recipes/Elements/Radio\" component={RecipesSchemaBuilder} parameters={{\n      docs: {\n        source: {\n          code: \"\"\n        }\n      }\n    }} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"recipes\"\n    }}>{`Recipes`}</h1>\n    <p>{`How to build specific form elements to use the hooks provided by `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"radio-field-recipe\"\n    }}>{`Radio Field Recipe`}</h2>\n    <p>{`This recipe will show how to build a group/simple radio using the `}<inlineCode parentName=\"p\">{`input[type=\"radio\"]`}</inlineCode>{` markup following the interface defined by `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <p>{`Here, we are using `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.styled-components.com/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`styled-components`}</a>{` for prettifying styles.`}</p>\n    <p><strong parentName=\"p\">{`src/ValidationResult.jsx`}</strong></p>\n    <p>{`You will probably need a component to display the validations, see the draft below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport styled from 'styled-components';\n\nconst ValidationResultLayout = styled.section\\`\n  .ValidationResultLayout__message {\n    color: red;\n  }\n\\`;\n\nexport default function ValidationResult({ errors = [] }) {\n  return (\n    <ValidationResultLayout>\n      {validations.map(\n        (validation) =>(\n          <div className=\"ValidationResultLayout__message\" key={validation.key}>\n            {JSON.stringify(validation, null, 2)}\n          </div>\n        )\n      )}\n    </ValidationResultLayout>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"radiofield\"\n    }}>{`RadioField`}</h3>\n    <p>{`Here, validations are received always and the consumer decides when to display them.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: For this case, there is no validation added. But, as all the other recipes, we cloud display the validations straightaway or through some property to control if it will be displayed. e.g. `}<inlineCode parentName=\"p\">{`showValidation`}</inlineCode>{` when the form is submitted, then, it would be able to display by `}<inlineCode parentName=\"p\">{`{showValidation && <ValidationResult validations={validations} />}`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, { useCallback, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport styled from 'styled-components';\n\nconst RadioFieldLayout = styled.div\\`\n  padding: 0 0 10px 0;\n  display: grid;\n  grid-template-columns: min-content;\n  grid-template-rows: min-content auto;\n\n  label {\n    display: grid;\n    grid-template-columns: min-content min-content;\n    grid-template-rows: auto;\n    white-space: nowrap;\n    grid-gap: 10px;\n  }\n\n  .RadioFieldLayout__validations {\n    display: block;\n    white-space: nowrap;\n  }\n\\`;\n\nexport default function RadioField({\n  checkedValue,\n  field,\n  label: labelText,\n  name,\n}) {\n  const id = useRef(uuid.v4());\n\n  return (\n    <RadioFieldLayout>\n      <label htmlFor={id.current}>\n        <span>{labelText}</span>\n        <input\n          id={id.current}\n          name={name}\n          type=\"radio\"\n          {...field}\n          value={checkedValue}\n          checked={value === checkedValue}\n        />\n      </label>\n    </RadioFieldLayout>\n  );\n}\n\nRadioField.defaultProps = {\n  label: null,\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-the-radiofield\"\n    }}>{`Using the RadioField`}</h2>\n    <p>{`After building the Dropdown, see below how to use it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport styled from 'styled-components';\nimport { useFormFlowField } from 'react-form-flow';\nimport RadioField from './RadioField';\n\nconst RadioFieldRecipeLayout = styled.div\\`\\`;\n\nexport default function RadioFieldRecipe() {\n  const handField = useFormFlowField('hand', { eventType: 'value' });\n\n  return (\n    <RadioFieldRecipeLayout>\n      <h2>Interact with the radios below by clicking...</h2>\n      <p>\n        <strong>Note:</strong>\n        <span>\n          the property <strong>name</strong> is important for a radio in a form.\n        </span>\n      </p>\n      <fieldset>\n        <legend>Left/Right hand</legend>\n        <RadioField {...handField} label=\"Left\" checkedValue=\"left\" name=\"hand\" />\n        <RadioField {...handField} label=\"Right\" checkedValue=\"right\" name=\"hand\" />\n        <RadioField {...handField} label=\"Both\" checkedValue=\"both\" name=\"hand\" />\n        <span>\n          value:\n          {handField.value}\n        </span>\n      </fieldset>\n      {(handField.submitted || handField.touched || handField.dirty) && (\n        <ValidationResult errors={handField.errors} />\n      )}\n    </RadioFieldRecipeLayout>\n  );\n}\n`}</code></pre>\n    <p>{`And then...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`  import { FormFlowProvider } from 'react-form-flow';\n\n  const initialData = { ... };\n  const schemaData = { ... };\n\n  // ...\n\n  <FormFlowProvider initialData={initialData} schemaData={schemaData}>\n    <RadioFieldRecipe />\n  </FormFlowProvider>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Docs/Recipes/Elements/Radio', parameters: {\n  docs: {\n    source: {\n      code: \"\"\n    }\n  }\n}, component: RecipesSchemaBuilder, includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\nimport RecipesSchemaBuilder, { decode, data } from './RecipesSchemaBuilder'\nexport const Template = args => <RecipesSchemaBuilder {...args} mdxType=\"RecipesSchemaBuilder\" />;\n\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Docs/Recipes/Schema Builder\" component={RecipesSchemaBuilder} parameters={{\n      docs: {\n        source: {\n          code: \"\"\n        }\n      }\n    }} mdxType=\"Meta\" />\n    <Props of={RecipesSchemaBuilder} mdxType=\"Props\" />\n\n    <h1 {...{\n      \"id\": \"recipes\"\n    }}>{`Recipes`}</h1>\n    <p>{`This page offers a interactive way to experience the validations with the form library.`}</p>\n    <h2 {...{\n      \"id\": \"schema-builder\"\n    }}>{`Schema Builder`}</h2>\n    <p>{`Using the new SchemaBuilder, you can edit the body of the function getShemaData(SchemaBuilder, hasValue).`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Schema Builder\" argTypes={{\n        data: {\n          control: {\n            type: \"object\"\n          }\n        },\n        schemaData: {\n          control: false\n        },\n        factories: {\n          control: false\n        }\n      }} args={{\n        data\n      }} mdxType=\"Story\">\n    {Template.bind({})}\n  </Story>\n    </Canvas>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const schemaBuilder = Template.bind({});\nschemaBuilder.storyName = 'Schema Builder';\nschemaBuilder.argTypes = {\n  data: {\n    control: {\n      type: \"object\"\n    }\n  },\n  schemaData: {\n    control: false\n  },\n  factories: {\n    control: false\n  }\n};\nschemaBuilder.args = {\n  data\n};\nschemaBuilder.parameters = { storySource: { source: 'args => <RecipesSchemaBuilder {...args} />' } };\n\nconst componentMeta = { title: 'Docs/Recipes/Schema Builder', parameters: {\n  docs: {\n    source: {\n      code: \"\"\n    }\n  }\n}, component: RecipesSchemaBuilder, includeStories: [\"schemaBuilder\"],  };\n\nconst mdxStoryNameToKey = {\"Schema Builder\":\"schemaBuilder\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Docs/Recipes/useFormFlowItem\" component={() => <div />} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"useformflowitem\"\n    }}>{`useFormFlowItem`}</h1>\n    <p><inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{` as its name describes is a library to define a common and automated workflow to collect and validate form data. Allow user to consume the data and validation based on the json path.`}</p>\n    <p>{`To improve your productivity, it would be good to create your core form components such as input, dropdowns and on and on following the `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{` spec.`}</p>\n    <p><em parentName=\"p\">{`JSON PATH`}</em>{` is a notation to navigate through the JSON object.`}</p>\n    <p>{`While we are going to exemplify how to use the `}<inlineCode parentName=\"p\">{`useFormFlowItem`}</inlineCode>{`, it is encouraged to use the `}<inlineCode parentName=\"p\">{`useFormFlowField`}</inlineCode>{` used in the `}<inlineCode parentName=\"p\">{`Docs/Recipes/Elements`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Docs/Getting Started`}</inlineCode>{`.`}</p>\n    <p>{`e.g.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const data = {\n    person: {\n      id: 1,\n      name: 'Jane Doe',\n      email: 'jane@doe.dead'\n      children:[\n        {id: 2, name: 'John Doe'}\n      ]\n    }\n};\n`}</code></pre>\n    <p>{`So, observing the json above, the json path to access the name of first child is `}<inlineCode parentName=\"p\">{`\"person.chidlren[0].name\"`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"validationresult\"\n    }}>{`ValidationResult`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\n\nexport default function ValidationResult({ label, validations }) {\n  return (\n    <section>\n      {!!label && <div>{label}</div>}\n      {validations.map(({ key, isValid, message }) => !isValid && <div key={key}>{message}</div>)}\n    </section>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"inputfield\"\n    }}>{`InputField`}</h3>\n    <p>{`The input field could receive from the `}<inlineCode parentName=\"p\">{`useFormFlowItem`}</inlineCode>{` an object with the spec below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  onChangeValue /* Function to update an object regarding the json path and value */,\n  onChange /* Function to handle input event \"change\" */,\n  setData /* Function to set the whole form data */,\n  validations  /* arrayOf(ValidationResult) */,\n  value /* string */,\n}\n`}</code></pre>\n    <p>{`Component...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport ValidationResult from './ValidationResult';\n\nexport default function InputField({\n  label,\n  onChange,\n  validations /* Array<Validation> (type) */,\n  value,\n}) {\n  return (\n    <div>\n      <div>{label}</div>\n      <input type=\"text\" onChange={onChange} value={value} />\n      <div>\n        <ValidationResult validations={validations} />\n      </div>\n    </div>\n  );\n}\n\nInputField.defaultProps = {\n  value: '',\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"schemadata\"\n    }}>{`schemaData`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { SchemaBuilder } from 'react-form-flow';\n\nSchemaBuilder.factory(\"required\", (metadata) => hasValue(metadata.value ?? \"\"));\nSchemaBuilder.factory(\"min-length\", ({ value }) => !hasValue(value ?? \"\") || (value ?? \"\").length >= min, {\n  response: ({ value }) => ({ length: (value ?? \"\").length })\n});\n\nexport default SchemaBuilder.builder()\n  .with(\"name\")\n  .check(\"required\", { message: \"Name is required\" })\n  .check(\"min-length\", { min: 5, message: \"Name must be greater than 5 characters\" })\n  .end()\n  .with(\"description\")\n  .check(\"required\", { message: \"Description is required\" })\n  .check(\"min-length\", { min: 50, message: \"Name must be greater than 50 characters\" })\n  .end()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"app\"\n    }}>{`App`}</h4>\n    <p>{`A few things are required in order to use the `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{` library.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`initialData: the initial data to be rendered in the form`}</li>\n      <li parentName=\"ul\">{`schemaData: an object with validation rules per json path`}</li>\n      <li parentName=\"ul\">{`children: the react node being wrapped by the provider containing the real form within fields`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport styled from 'styled-components';\nimport {\n  FormFlowProvider,\n  useFormFlowItem,\n  useFormFlowValidation,\n} from 'react-form-flow';\nimport ValidationResult from './ValidationResult';\nimport InputField from './InputField';\nimport schemaData from './schemaData';\n\nconst Layout = styled.div\\`\n  height: 100%;\n  width: 100%;\n\n  display: grid;\n\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto;\n\\`;\n\nfunction Validations() {\n  const nameValidation = useFormFlowValidation('name');\n  const descriptionValidation = useFormFlowItem('description');\n\n  return (\n    <div>\n      <ValidationResult label=\"Name\" {...nameValidation} />\n      <ValidationResult label=\"Description\" {...descriptionValidation} />\n    </div>\n  );\n}\n\nfunction Form() {\n  const nameField = useFormFlowItem('name');\n  const descriptionField = useFormFlowItem('description');\n\n  return (\n    <div>\n      <InputField label=\"Name\" {...nameField} />\n      <InputField label=\"Description\" {...descriptionField} />\n    </div>\n  );\n}\n\nfunction DemoApp() {\n  return (\n    <Layout>\n      <FormFlowProvider initialData={{ name: '', description: '' }} schemaData={schemaData}>\n        <Validations />\n        <Form />\n      </FormFlowProvider>\n    </Layout>\n  );\n}\n`}</code></pre>\n    <p>{`Running...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<DemoApp />\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Docs/Recipes/useFormFlowItem', component: () => <div />, includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\nimport RecipesSchemaBuilder, { decode, data } from './RecipesSchemaBuilder'\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Docs/Recipes/Validations\" component={RecipesSchemaBuilder} parameters={{\n      docs: {\n        source: {\n          code: \"\"\n        }\n      }\n    }} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"recipes\"\n    }}>{`Recipes`}</h1>\n    <p>{`The idea here is to show how to optimise your performance by reusing some strategies. For this, we are going to use factory methods to build validations.`}</p>\n    <h2 {...{\n      \"id\": \"quick-reminder\"\n    }}>{`Quick reminder`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`schemaData`}</inlineCode>{` object is built indexing validations by provided JSON PATH.`}</p>\n    <h2 {...{\n      \"id\": \"factories\"\n    }}>{`Factories`}</h2>\n    <p>{`Factory method is a creational pattern to deal with creation of objects in general. Its definition could be also expanded to creation of contracts.`}</p>\n    <p>{`Following the examples below we are going to factory a required validation. So, these validations have the same type of check varying on path and key returned.`}</p>\n    <h3 {...{\n      \"id\": \"factoring-required\"\n    }}>{`Factoring required`}</h3>\n    <p>{`Factory a required validation pre-defining the key and path uniquely and allowing end consumer to define the message returned.`}</p>\n    <p>{`The return of the validation function must provide the interface below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Validation {\n  /**\n   * The whole data form\n   */\n  data: any;\n  /**\n   * The dependency values for conditionals\n   */\n  dependencies: Array<any>;\n  /**\n   * Method to get value given a form data and json path\n   * @param data - the form data\n   * @param path - the json path\n   * @returns {any}\n   */\n  get(data: any, path: string): any;\n  /** \n   * Whether the validation passed or failed\n   */\n  isValid: boolean;\n  /** \n   * Validation name\n   */\n  name: string;\n  /** \n   * A construction of {path + \".errors.\" + name}\n   * e.g.\n   * - path: user.role\n   * - name: required\n   * - key: user.role.errors.required\n   */\n  key: string;\n  /**\n   * The path to be validated\n   */\n  path: string;\n  /**\n   * The value related to the path in the form\n   */\n  value: any;\n  /** \n   * Any extra information provided\n   */\n  [key: string]: any;\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`src/SchemaBuilder.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { SchemaBuilder } from \"react-form-flow\";\n\nfunction hasValue(value) {\n  return (\n    value !== null && value !== undefined && (typeof value !== 'string' || (value && value.trim()))\n  );\n}   \n\nSchemaBuilder.factory(\"required\", (metadata) => hasValue(metadata.value ?? \"\"));\n\nexport default SchemaBuilder;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"factoring-max-length\"\n    }}>{`Factoring max length`}</h3>\n    <p>{`For the max length validation where we will provide dynamic metadata for further usage.`}</p>\n    <p>{`Continuation on `}<strong parentName=\"p\">{`src/SchemaBuilder.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`SchemaBuilder.factory(\"max-length\", (metadata) => {\n  const value = metadata.value ?? \"\";\n  // Either will be valid if there is no value, or it is lesser of equals than max.\n  // Also, we expect the max valid is provided when using the factored validation\n  const isValid = !hasValue(value) || value.length <= metadata.max;\n  return isValid;\n}, {\n  // Here, we are adding useful information to all schema data using this validation.\n  response: (metadata) => ({ length: (metadata.value ?? \"\").trim().length })\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"creating-the-schemadata\"\n    }}>{`Creating the schemaData`}</h3>\n    <p>{`To create our schemaData we need to make use of the `}<inlineCode parentName=\"p\">{`src/SchemaBuilder`}</inlineCode>{`. Make sure to import the SchemaBuilder from your wrapper to make sure the `}<inlineCode parentName=\"p\">{`factory`}</inlineCode>{` has registed the common validations before using it.`}</p>\n    <p><strong parentName=\"p\">{`src/schemaData.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import SchemaBuilder from './SchemaBuilder';\n\nexport default SchemaBuilder.builder()\n  .with(\"name\")\n  .check(\"required\")\n  .check(\"max-length\", { max: 50 })\n  .end()\n  .build();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"using-the-additional-information-length\"\n    }}>{`Using the additional information \"length\"`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { FormFlowProvider, useFormFlowField } from 'react-form-flow';\nimport i18n from './i18n';\nimport schemaData from \"./schemaData\"\n\n/**\nImagine the translation as \n\n{\n  \"name\": {\n    \"errors\": {\n      \"max-length\": \"Name cannot be greater than {{max}} (characters {{length}}/{{max}}).\"\n    }\n  }\n}\n\n*/ \n\nfunction  MinMaxLengthMessage({ min, max, unit }) {\n  return \\`Only values between \\${min} and \\${max} is allowed for \\${unit}.\\`;\n}\n\nfunction Form() {\n  const { errors } = useFormFlowField('name');\n  /** \n   * Flexibility provided by defining the end message through translation libraries\n   */\n  const { t } = useTranslate();\n  return (\n    <div>\n      {errors.map(\n        (validation) => (\n          <div key={validation.key}>\n            {t(validation.key, { values: { length: validation.length, max: validation.max } })}\n          </div>\n        )\n      )}\n    </div>\n  )\n}\n\n// forcing the error in the validation\nconst initialData = { name: Array.from({ length: 51 }).map(() => \"a\").join(\"\") };\n  \nfunction App() {\n  return (\n    <FormFlowProvider initialData={initialData} schemaData={schemaData}>\n      <Form />\n    </FormFlowProvider>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dependencies\"\n    }}>{`Dependencies`}</h3>\n    <p>{`Lets say you have a validation for range, but, this information is obtained from 2 fields which would have `}<inlineCode parentName=\"p\">{`min`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` constraints for the value and a list of acceptable units e.g. `}<inlineCode parentName=\"p\">{`['seconds', 'minutes', 'hours']`}</inlineCode>{`.`}</p>\n    <p>{`Continuation on `}<strong parentName=\"p\">{`src/SchemaBuilder.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const MinMaxUnitsConstraints = {\n  seconds: [0, 60],\n  minutes: [0, 60],\n  hours: [0, 24],\n}\nSchemaBuilder.factory(\"min-max-units\", (metadata) => {\n  const { dependencies } = metadata;\n  const [unit] = dependencies;\n  const value = Number(metadata.value ?? \"0\");\n  const [min, max] = MinMaxUnitsConstraints[unit];\n  const isValid = !hasValue(value) || (value <= max && value >= min);\n  return isValid;\n}, {\n  response: (metadata) => {\n    const { dependencies } = metadata;\n    const [unit] = dependencies;\n    const [min, max] = MinMaxUnitsConstraints[unit];\n    return { min, max };\n  }\n})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"new-schemadata\"\n    }}>{`New schemaData`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import SchemaBuilder from \"./SchemaBuilder\";\n\nexport default SchemaBuilder.builder()\n  /** \n   * Declaring an invalidation path\n   */\n  .with(\"product.expiresIn.value\", [\"$.unit\"])\n  .check(\"requried\")\n  .check(\"min-max-units\")\n  .end()\n  .with(\"product.expiresIn.unit\")\n  .check(\"requried\")\n  .end()\n  .build()\n`}</code></pre>\n    <p>{`By doing `}<inlineCode parentName=\"p\">{`.with(\"product.expiresIn.value\", [\"$.unit\"])`}</inlineCode>{`, you have provided an invalidation path list. Every time that the `}<inlineCode parentName=\"p\">{`unit`}</inlineCode>{` is changed the validation for `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` is also computed.`}</p>\n    <h3 {...{\n      \"id\": \"multiple-dependencies\"\n    }}>{`Multiple Dependencies`}</h3>\n    <p>{`The invalidation paths can be defined by absolute and relative paths. Being `}<inlineCode parentName=\"p\">{`$.`}</inlineCode>{` the way to navigate to parent node in relative path. We can better see it through examples.`}</p>\n    <p>{`Below find an example of multiple dependencies, and the navigation to higher scope levels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import SchemaBuilder from \"./SchemaBuilder\";\n\nexport default SchemaBuilder.builder()\n  .with(\"product.madeOn\")\n  .check(\"requried\")\n  .end()\n  .with(\"product.expiresIn.value\", [\"$.unit\", \"$.$.madeOn\"])\n  .check(\"requried\")\n  .check(\"min-max-units\")\n  .end()\n  .with(\"product.expiresIn.unit\")\n  .check(\"requried\")\n  .end()\n  .build()\n`}</code></pre>\n    <p>{`Taking `}<inlineCode parentName=\"p\">{`product.expiresIn.value`}</inlineCode>{` and breaking into partial paths `}<inlineCode parentName=\"p\">{`[\"product\", \"expiresIn\", \"value\"]`}</inlineCode>{`, the navigation `}<inlineCode parentName=\"p\">{`$.`}</inlineCode>{` refers going back to `}<inlineCode parentName=\"p\">{`expiresIn`}</inlineCode>{`. Whereas `}<inlineCode parentName=\"p\">{`$.$.`}</inlineCode>{`, it would refer to `}<inlineCode parentName=\"p\">{`product`}</inlineCode>{`.`}</p>\n    <h5 {...{\n      \"id\": \"array-as-one-of-dependencies\"\n    }}>{`Array as one of dependencies`}</h5>\n    <p>{`Let say, you need a validation to be performed for changes in correlated data based on indexes. Before going straight to the example, we need to understand a notation to refer to the indexes.`}</p>\n    <p>{`Given the rule `}<inlineCode parentName=\"p\">{`contacts[]`}</inlineCode>{`, this means we have validations running for each element of the array contacts. To correlated indexes, we can user the reference to ocurency of `}<inlineCode parentName=\"p\">{`[]`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`$N`}</inlineCode>{`, being `}<inlineCode parentName=\"p\">{`N`}</inlineCode>{` the index where the `}<inlineCode parentName=\"p\">{`[]`}</inlineCode>{` occurs in the original rule.`}</p>\n    <p>{`Ok, I get it too. It seems complex. Lets make it simple by examples.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Given the rule `}<inlineCode parentName=\"li\">{`people[].contacts[]`}</inlineCode>{`, invalidation paths `}<inlineCode parentName=\"li\">{`['$.friends[$1]']`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Everytime friends at `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` changes, the people `}<inlineCode parentName=\"li\">{`people[i].contacts[N]`}</inlineCode>{` will be re-validated`}</li>\n          <li parentName=\"ul\">{`This because the index of `}<inlineCode parentName=\"li\">{`[]`}</inlineCode>{` for `}<inlineCode parentName=\"li\">{`contacts`}</inlineCode>{` in the original rule is `}<inlineCode parentName=\"li\">{`1`}</inlineCode>{`, then, it is referred at `}<inlineCode parentName=\"li\">{`friends`}</inlineCode>{` as `}<inlineCode parentName=\"li\">{`$1`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Given the rule `}<inlineCode parentName=\"li\">{`store.foods[]`}</inlineCode>{`, invalidation paths `}<inlineCode parentName=\"li\">{`['$.stocks[$0]']`}</inlineCode>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Everytime stocks at `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` changes, the foods `}<inlineCode parentName=\"li\">{`store.foods[N]`}</inlineCode>{` will be re-validated`}</li>\n          <li parentName=\"ul\">{`This because the index of `}<inlineCode parentName=\"li\">{`[]`}</inlineCode>{` for `}<inlineCode parentName=\"li\">{`foods`}</inlineCode>{` in the original rule is `}<inlineCode parentName=\"li\">{`0`}</inlineCode>{`, then, it is referred at `}<inlineCode parentName=\"li\">{`stocks`}</inlineCode>{` as `}<inlineCode parentName=\"li\">{`$0`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import SchemaBuilder from \"./SchemaBuilder\";\n\nSchemaBuilder.factory(\"requried.if-in-stock\", (metadata) => {\n  const { dependencies } = metadata;\n  const [stockWithSameIndex] = dependencies;\n  const value = metadata.value ?? \"\";\n  /** \n   * If there is value is valid, if not, only if there is stock. So, no value\n   * and stock 0 is valid.\n   */\n  const isValid = hasValue(value) || Number(stockWithSameIndex ?? 0) === 0;\n  return isValid;\n})\n\nexport default SchemaBuilder.builder()\n  .with(\"store.stocks[]\")\n  .check(\"requried\")\n  .end()\n  .with(\"store.foods[]\", [\"$.stocks[$0]\"])\n  .check(\"requried.if-in-stock\")\n  .end()\n  .build()\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Docs/Recipes/Validations', parameters: {\n  docs: {\n    source: {\n      code: \"\"\n    }\n  }\n}, component: RecipesSchemaBuilder, includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import hasValue from './hasValue';\n\nexport default function createRequiredValidation(message) {\n  return ({ data, value, path }) => {\n    const key = `${path}-required`;\n    const isValid = hasValue(value);\n\n    return { data, value, path, key, isValid, message };\n  };\n}\n","import hasValue from './hasValue';\n\nexport default function createMaxLengthValidation(max, createMessage) {\n  return args => {\n    const { data, value, path } = args;\n    const key = `${path}-max-length`;\n    const isValid = !hasValue(value) || value.length <= max;\n    const { length } = value || '';\n    const message = createMessage({ data, value, path, max, length });\n\n    return { data, value, path, key, isValid, message };\n  };\n}\n","import moment from 'moment';\nimport { createValidations } from '../../src';\nimport createRequiredValidation from '../validationRecipes/createRequiredValidation';\nimport createMaxLengthValidation from '../validationRecipes/createMaxLengthValidation';\n\nexport default {\n  name: createValidations(\n    [],\n    createRequiredValidation('Please enter your name.'),\n    createMaxLengthValidation(\n      100,\n      ({ length, max }) =>\n        `Name should not have more than ${max} characters. (${\n          length > max ? 0 : max - length\n        } characters beyond)`\n    )\n  ),\n  email: createValidations(\n    [],\n    createRequiredValidation('Please enter your email.'),\n    createMaxLengthValidation(\n      300,\n      ({ length, max }) =>\n        `Email should not have more than ${max} characters. (${\n          length > max ? 0 : max - length\n        } characters beyond)`\n    )\n  ),\n  birthday: createValidations([], createRequiredValidation('Please enter your birthday.'), args => {\n    const { data, path, value } = args;\n    const date = moment(value);\n    const now = moment();\n    const isValid = !value || (date.isValid() ? now.valueOf() > date.valueOf() : false);\n    const message = `Please enter a valid date not beyond \"${now.format(\n      'DD/MM/YYYY'\n    )}\" e.g. 21/01/2010 (DD/MM/YYYY)`;\n\n    return {\n      data,\n      isValid,\n      key: `${path}-date-invalid`,\n      message,\n      path,\n      value,\n    };\n  }),\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useFormFlowField } from '../../src';\nimport InputField from '../fields/InputField';\n\nconst AddressBookFormLayout = styled.div``;\n\nexport default function AddressBookForm() {\n  const nameField = useFormFlowField('name');\n  const emailField = useFormFlowField('email');\n  const birthdayField = useFormFlowField('birthday');\n\n  return (\n    <AddressBookFormLayout>\n      <InputField {...nameField} label=\"Name\" layout=\"grid\" />\n      <InputField {...emailField} label=\"Email\" layout=\"grid\" type=\"email\" />\n      <InputField {...birthdayField} label=\"Birthday\" layout=\"grid\" type=\"date\" />\n    </AddressBookFormLayout>\n  );\n}\n\nAddressBookForm.propTypes = {};\n","import React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport FormFlowProvider from '../../src';\nimport schemaData from './schemaData';\nimport AddressBookForm from './AddressBookForm';\n\nconst AddressBookLayout = styled.div``;\n\nexport default function AddressBook() {\n  const initialState = useRef({});\n\n  return (\n    <AddressBookLayout>\n      <FormFlowProvider initialData={initialState.current} schemaData={schemaData}>\n        <AddressBookForm />\n      </FormFlowProvider>\n    </AddressBookLayout>\n  );\n}\n\nAddressBook.propTypes = {};\n","import AddressBook from './AddressBook';\n\nexport default AddressBook;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\nimport AddressBook from '../react-form-flow-examples/AddressBook'\nexport const Template = args => <AddressBook {...args} mdxType=\"AddressBook\" />;\n\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Examples/Address Book\" component={AddressBook} mdxType=\"Meta\" />\n    <Props of={AddressBook} mdxType=\"Props\" />\n\n    <h1 {...{\n      \"id\": \"addressbook\"\n    }}>{`AddressBook`}</h1>\n    <p>{`Example of address book form with nested fields.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Default\" args={{}} mdxType=\"Story\">\n    {Template.bind({})}\n  </Story>\n    </Canvas>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const defaultStory = Template.bind({});\ndefaultStory.storyName = 'Default';\ndefaultStory.args = {};\ndefaultStory.parameters = { storySource: { source: 'args => <AddressBook {...args} />' } };\n\nconst componentMeta = { title: 'Examples/Address Book', component: AddressBook, includeStories: [\"defaultStory\"],  };\n\nconst mdxStoryNameToKey = {\"Default\":\"defaultStory\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","export default function hasValue(value) {\n  return (\n    value !== null &&\n    value !== undefined &&\n    (typeof value !== 'string' || !!(value && value.trim()))\n  );\n}\n","import ValidationProcessor from '../../../src/SchemaBuilder/ValidationProcessor';\nimport hasValue from './hasValue';\n\nexport default function createRequiredValidation(message: string): ValidationProcessor {\n  return ({ data, value, path, ...others }) => {\n    const key = `${path}-required`;\n    const isValid = hasValue(value);\n\n    return { ...others, data, value, path, key, isValid, message };\n  };\n}\n","import ValidationProcessor from '../../../src/SchemaBuilder/ValidationProcessor';\nimport hasValue from './hasValue';\n\nexport default function createMinLengthValidation(min, createMessage): ValidationProcessor {\n  return args => {\n    const { data, value, path, ...others } = args;\n    const key = `${path}-min-length`;\n    const isValid = !hasValue(value) || value.length >= min;\n    const { length } = value || '';\n    const message = createMessage({ data, value, path, min, length });\n\n    return { ...others, data, value, path, key, isValid, message };\n  };\n}\n","import React from 'react';\n// eslint-disable-next-line\nimport styled from 'styled-components';\nimport InputField from '../react-form-flow-examples/fields/InputField';\nimport Validation from '../react-form-flow-examples/fields/Validation';\nimport { FormFlowProvider, useFormFlowField, useResetForm, useSubmitForm } from '../src';\n\nconst Layout = styled.div`\n  height: 100%;\n  width: 100%;\n\n  display: grid;\n\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: auto;\n`;\n\nfunction Validations() {\n  const name = useFormFlowField('name');\n  const description = useFormFlowField('description');\n\n  return (\n    <div>\n      {(name.submitted || name.touched) && <Validation label=\"Name\" errors={name.errors} />}\n      {(description.submitted || description.touched) && (\n        <Validation label=\"Description\" errors={description.errors} />\n      )}\n    </div>\n  );\n}\n\nfunction Form() {\n  const name = useFormFlowField('name');\n  const description = useFormFlowField('description');\n  const submissionProps = useSubmitForm(data => {\n    console.log(data);\n  });\n  const resetProps = useResetForm();\n\n  return (\n    <form {...submissionProps} {...resetProps}>\n      <InputField label=\"Name\" {...name} />\n      <InputField label=\"Description\" {...description} />\n      {/* eslint-disable-next-line react/button-has-type */}\n      <button type=\"reset\">Reset</button>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default ({ schemaData }) => (\n  <Layout>\n    <FormFlowProvider initialData={{}} schemaData={schemaData}>\n      <Validations />\n      <Form />\n    </FormFlowProvider>\n  </Layout>\n);\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { createValidations } from '../src';\nimport createRequiredValidation from '../tools/helpers/components/createRequiredValidation';\nimport createMinLengthValidation from '../tools/helpers/components/createMinLengthValidation';\n\nimport App from './App';\n\nexport default function AppInteractive({\n  requiredNameMessage,\n  requiredDescriptionMessage,\n  minNameLength,\n  minDescriptionLength,\n}) {\n  const schemaData = useMemo(\n    () => ({\n      name: createValidations(\n        [],\n        createRequiredValidation(requiredNameMessage),\n        createMinLengthValidation(\n          minNameLength,\n          ({ length, min }) =>\n            `Name should have more than ${min} characters. (Remaining ${\n              length > min ? 0 : min - length\n            })`\n        )\n      ),\n      description: createValidations(\n        [],\n        createRequiredValidation(requiredDescriptionMessage),\n        createMinLengthValidation(\n          minDescriptionLength,\n          ({ length, min }) =>\n            `Description should have more than ${min} characters. (Remaining ${\n              length > min ? 0 : min - length\n            })`\n        )\n      ),\n    }),\n    [requiredNameMessage, minNameLength, requiredDescriptionMessage, minDescriptionLength]\n  );\n\n  return <App schemaData={schemaData} />;\n}\n\nAppInteractive.propTypes = {\n  requiredNameMessage: PropTypes.string.isRequired,\n  requiredDescriptionMessage: PropTypes.string.isRequired,\n  minNameLength: PropTypes.number.isRequired,\n  minDescriptionLength: PropTypes.number.isRequired,\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, Props } from '@storybook/addon-docs'\nimport AppInteractive from './AppInteractive'\nexport const Template = args => <AppInteractive {...args} mdxType=\"AppInteractive\" />;\n\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"Examples/Application Interactive\" component={AppInteractive} mdxType=\"Meta\" />\n    <Props of={AppInteractive} mdxType=\"Props\" />\n\n    <h1 {...{\n      \"id\": \"appinteractive\"\n    }}>{`AppInteractive`}</h1>\n    <p>{`Validating an interactive form built with `}<inlineCode parentName=\"p\">{`react-form-flow`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Default\" argTypes={{\n        minNameLength: {\n          control: {\n            type: 'range',\n            min: 2,\n            max: 20,\n            step: 1\n          }\n        },\n        minDescriptionLength: {\n          control: {\n            type: 'range',\n            min: 10,\n            max: 2000,\n            step: 1\n          }\n        }\n      }} args={{\n        requiredNameMessage: 'Name is required!',\n        minNameLength: 5,\n        requiredDescriptionMessage: 'Description is required!',\n        minDescriptionLength: 300\n      }} mdxType=\"Story\">\n    {Template.bind({})}\n  </Story>\n    </Canvas>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const defaultStory = Template.bind({});\ndefaultStory.storyName = 'Default';\ndefaultStory.argTypes = {\n  minNameLength: {\n    control: {\n      type: 'range',\n      min: 2,\n      max: 20,\n      step: 1\n    }\n  },\n  minDescriptionLength: {\n    control: {\n      type: 'range',\n      min: 10,\n      max: 2000,\n      step: 1\n    }\n  }\n};\ndefaultStory.args = {\n  requiredNameMessage: 'Name is required!',\n  minNameLength: 5,\n  requiredDescriptionMessage: 'Description is required!',\n  minDescriptionLength: 300\n};\ndefaultStory.parameters = { storySource: { source: 'args => <AppInteractive {...args} />' } };\n\nconst componentMeta = { title: 'Examples/Application Interactive', component: AppInteractive, includeStories: [\"defaultStory\"],  };\n\nconst mdxStoryNameToKey = {\"Default\":\"defaultStory\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentMeta={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import React from 'react'\nimport { HashRouter } from 'react-router-dom'\n\nexport default [\n  (Story) => (\n    <HashRouter>\n      <Story />\n    </HashRouter>\n  ),\n]\n","import decorators from './decorators'\n\nexport const parameters = {\n  options: {\n    storySort: (a, b) => {\n      if (b[1].kind === 'Docs/Getting Started') {\n        return 1\n      }\n      if (a[1].kind === 'Docs/Getting Started') {\n        return -1\n      }\n\n      if (b[1].kind.includes('Docs/Recipes')) {\n        if (!a[1].kind.includes('Recipes')) {\n          return 2\n        }\n\n        if (b[1].kind.includes('Schema Builder')) {\n          return 100;\n        }\n        if (a[1].kind.includes('Schema Builder')) {\n          return -100;\n        }\n\n        if (b[1].kind.includes('Validations')) {\n          return 101;\n        }\n        if (a[1].kind.includes('Validations')) {\n          return -101;\n        }\n\n        if (b[1].kind.includes('useFormFlowItem')) {\n          return 102;\n        }\n        if (a[1].kind.includes('useFormFlowItem')) {\n          return -102;\n        }\n\n        return b[1].kind > a[1].kind ? -1 : 1;\n      }\n\n      // Sort the other stories by ID\n      // https://github.com/storybookjs/storybook/issues/548#issuecomment-530305279\n      return a[1].kind === b[1].kind\n        ? 0\n        : a[1].id.localeCompare(b[1].id, { numeric: true })\n    },\n  },\n}\n\nexport { decorators }\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/Volumes/Extreme Pro/repos/javascript/react-form-flow/node_modules/@storybook/client-api';\nimport { logger } from '/Volumes/Extreme Pro/repos/javascript/react-form-flow/node_modules/@storybook/client-logger';\nimport * as config from '/Volumes/Extreme Pro/repos/javascript/react-form-flow/.storybook/preview.ts';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n    case 'argTypes':\n      {\n        return logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","import React from 'react';\nimport styled from 'styled-components';\n\nconst LabelFeedback = styled.div`\n  color: ${({ isColored, isValid }) => (isColored ? (isValid ? 'green' : 'red') : 'black')};\n`;\n\nconst ValidationLayout = styled.section`\n  .ValidationLayout__message {\n    color: red;\n  }\n`;\n\nexport default function Validation({ isColored = false, label, errors = [] }) {\n  return (\n    <ValidationLayout>\n      {!!label && (\n        <LabelFeedback isColored={isColored} isValid={!errors.some(({ isValid }) => !isValid)}>\n          {label}\n        </LabelFeedback>\n      )}\n      {errors.map(({ key, message }) => (\n        <React.Fragment key={key}>\n          <div className=\"ValidationLayout__message\">\n            key: {key}\n          </div>\n          <div className=\"ValidationLayout__message\">\n            message: {message}\n          </div>\n        </React.Fragment>\n      ))}\n    </ValidationLayout>\n  );\n}\n","import React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport uuid from 'uuid';\nimport Validation from './Validation';\n\nconst InputFieldLayout = styled.div`\n  padding: 0 0 10px 0;\n\n  display: ${({ layout }) => layout};\n  grid-template-rows: auto;\n  grid-template-columns: min-content minmax(1px, 100%);\n  grid-column-gap: 10px;\n\n  label > span {\n    display: block;\n  }\n  .InputFieldLayout__validations {\n    display: ${({ layout }) => layout};\n    align-items: end;\n  }\n`;\n\nexport default function InputField(props) {\n  const { label: labelText, layout, type, errors, field, submitted, touched } = props;\n  const id = useRef(uuid.v4());\n\n  return (\n    <InputFieldLayout layout={layout}>\n      <label htmlFor={id.current}>\n        <span>{labelText}</span>\n        <input id={id.current} type={type} {...field} value={field.value || ''} />\n      </label>\n      <div className=\"InputFieldLayout__validations\">\n        {(submitted || touched) && <Validation errors={errors} />}\n      </div>\n    </InputFieldLayout>\n  );\n}\n\nInputField.Layout = InputFieldLayout;\n\nInputField.defaultProps = {\n  label: null,\n  layout: 'block',\n  type: 'text',\n  errors: [],\n};\n","import Subscriber from './Subscriber';\n\n/**\n * Subject similar to rxjs Subject\n */\nexport default class Subject<T> {\n  subscribers: { listener: Subscriber<T> }[] = [];\n\n  subscribe(listener: Subscriber<T>) {\n    const self = this;\n    const subscriber = {\n      listener,\n    };\n\n    self.subscribers.push(subscriber);\n\n    return {\n      unsubscribe: () => {\n        self.subscribers = self.subscribers.filter(item => item !== subscriber);\n      },\n    };\n  }\n\n  next(value: T) {\n    this.subscribers.forEach(({ listener }) => {\n      listener.next(value);\n    });\n  }\n}\n","import Subject from './Subject';\nimport Subscriber from './Subscriber';\n\nclass ObservableState<T> {\n  private subject: Subject<T>;\n  private value: T;\n  \n  static create = <T>(initialValue: T): ObservableState<T> => new ObservableState<T>(initialValue);\n  \n  private constructor(initialValue: T) {\n    this.value = initialValue;\n    this.subject = new Subject();\n  }\n\n  get = () => this.value;\n  set = (transformer: ((v: T) => T)) => {\n    const frozenValue = Object.freeze(this.value);\n    const newValue = transformer(frozenValue);\n    if (frozenValue !== newValue) {\n      this.value = newValue;\n      this.subject.next(this.value);\n    }\n  };\n  subscribe = (subscriber: Subscriber<T>) => this.subject.subscribe(subscriber);\n};\n\nexport default ObservableState;\n","import { useEffect, useMemo, useState } from 'react';\nimport ObservableState from './ObservableState';\n\nexport default function useObservableState<T>(observable: ObservableState<T>): [T, (transformer: (v: T) => T) => void] {\n  const [state, setState] = useState<T>(observable.get());\n\n  useEffect(() => {\n    const subscriber = observable.subscribe({\n      next: setState,\n    });\n\n    return () => {\n      subscriber.unsubscribe();\n    };\n  }, [observable]);\n\n  return useMemo(() => [Object.freeze(state) as T, observable.set as ((transformer: (v: T) => T) => void)], [observable.set, state]);\n}\n","import React from 'react';\nimport FormFlowDataType from './FormFlowDataType';\nimport { ObservableState } from './react-state';\n\nconst context = React.createContext<ObservableState<FormFlowDataType>>((ObservableState.create({} as any as FormFlowDataType)));\nexport default context;\n","// @ts-nocheck\nimport { get as getter, set as setter } from 'mutation-helper';\n\ntype Getter = (object: Object, field: string) => any;\nconst get: Getter = getter;\ntype Setter = (object: Object, field: string, value: any) => Object;\nconst set: Setter = setter;\n\nexport { get };\nexport { set };\n// eslint-disable-line\n","const EMPTY_LIST: string[] = [];\n/**\n * Resolves the absolute path to a given invalidation path\n * @param {array<string>} ancestorsPathParts - e.g. \"user.contacts[0].type\" => [\"user\", \"contacts[0]\", \"type\"]\n * @param {*} invalidationPath - the invalidation path\n * @returns {string} the absolute path\n */\nexport default function getAbsolutePath(\n  ancestorsPathParts: string[],\n  invalidationPath: any\n): string {\n  const matched = invalidationPath.match(/^(\\$\\.)*/)[0] || '';\n  const totalAncestorTokens = matched.length / 2;\n  const offsetEnd = ancestorsPathParts.length - totalAncestorTokens;\n  const parentPath = (offsetEnd > -1 && !!matched\n    ? ancestorsPathParts.slice(0, ancestorsPathParts.length - totalAncestorTokens).concat('')\n    : EMPTY_LIST\n  ).join('.');\n\n  return invalidationPath.replace(matched, parentPath);\n}\n","import { get } from './accessor';\nimport AggregatedValidator from './SchemaBuilder/AggregatedValidator';\nimport Validation from './SchemaBuilder/Validation';\nimport ValidationArgs from './SchemaBuilder/ValidationArgs';\nimport ValidationProcessor from './SchemaBuilder/ValidationProcessor';\n\n/**\n * Removes the index number from array notations\n */\nexport function clearIndexes(path: string): string {\n  return path.replace(/\\[\\d+\\]/g, '[]');\n}\n\n/**\n * Removes the index number preceeded of '$' from array notations\n */\nexport function clearIndexesIterator(path: string): string {\n  return path.replace(/\\[\\$\\d+\\]/g, '[]');\n}\n\n/**\n * Gets the index of iterator for array notation\n * e.g.  contacts[].types[] => contacts[$1].values[$0] => [1, 4]\n * e.g.  contacts[].values[] => messages[$1] => [1]\n * @param {string} path\n * @returns {array<number>}\n */\nexport function getIndexesIterator(path: string): string[] {\n  const indexesMatches = (path.match(/\\[\\$(\\d+)\\]/g) || [])\n    .slice()\n    // eslint-disable-next-line\n    .map(text => Number(text.replace(/[\\[\\]$]/g, '')));\n  const length = Math.max(...indexesMatches, 0) + 1;\n  const iterators: string[] = Array.from({ length }).map((_, index) => {\n    const reverseIndex = indexesMatches.indexOf(index);\n    return reverseIndex > -1 ? `$${reverseIndex}` : '';\n  });\n  return iterators;\n}\n\n/**\n * Adds item to list if list does not contain it.\n * (mutates the list)\n * @param {array} list\n * @param {any} item\n * @returns {void}\n */\nfunction add<T>(list: T[], item: T) {\n  if (!list.includes(item)) {\n    list.push(item);\n  }\n}\n\n/**\n * Creates list of paths based on data, prefix and remainingPaths.\n * (mutates the paths)\n */\nfunction derivatePaths(\n  paths: string[],\n  data: Object,\n  prefix: string | undefined,\n  remainingPaths: string[]\n): void {\n  if (remainingPaths.length === 0) {\n    add(paths, prefix);\n  }\n\n  const list = prefix ? get(data, prefix) : data;\n  const suffix = remainingPaths.pop();\n\n  if (list && list.forEach) {\n    list.forEach((_: any, idx: number) => {\n      derivatePaths(paths, data, `${prefix}[${idx}]${suffix}`, remainingPaths.slice());\n    });\n  }\n}\n\nexport function interpolatePathsByPaths(rawValidationPaths: string[], data: Object) {\n  const paths: string[] = [];\n\n  rawValidationPaths.forEach(jsonPath => {\n    const rawJsonPath = clearIndexes(jsonPath);\n    const nestedPaths = rawJsonPath\n      .split('[]')\n      .map(value => value.trim())\n      .reverse();\n    const parentPath = nestedPaths.pop();\n\n    if (parentPath) {\n      add(paths, parentPath);\n    }\n\n    if (nestedPaths.length > 0) {\n      derivatePaths(paths, data, parentPath, nestedPaths);\n    }\n  });\n\n  return paths;\n}\n\n/**\n * Creates a list of json paths based on the existing keys in the schema\n * and the data.\n */\nexport function interpolatePaths(schemaData: Object, data: Object): string[] {\n  const rawValidationPaths = Object.keys(schemaData);\n  return interpolatePathsByPaths(rawValidationPaths, data);\n}\n\n/**\n * Creates validator based on invalidationPaths and list of validations.\n */\nexport function createValidations(\n  invalidationPaths: string[],\n  ...validations: ValidationProcessor[]\n): AggregatedValidator {\n  function validate(args: ValidationArgs): Validation[] {\n    return validations.map(checkValidation => checkValidation(args));\n  }\n\n  return {\n    invalidationPaths,\n    validate,\n  };\n}\n","import { get } from '../accessor';\nimport getAbsolutePath from '../getAbsolutePath';\nimport { clearIndexes, interpolatePaths } from '../validationUtils';\nimport AggregatedValidator from './AggregatedValidator';\nimport SchemaValidationMethods from './SchemaValidationMethods';\nimport Validation from './Validation';\nimport ValidationState from './ValidationState';\n\ntype ValidationCache = {\n  dependencies: string[];\n  dependencyValues: any[];\n  previousValidations: Validation[] | null;\n};\n\n/**\n * Wraps the schema returning an object with validate and\n * validateAt functions which have a cache layer\n * @param {Object} schema\n * @returns {import('./types').Validator}\n */\nexport default function wrapSchemaWithValidationMethods(schema: {\n  [key: string]: AggregatedValidator;\n}): SchemaValidationMethods {\n  const cache: { [key: string]: ValidationCache } = {};\n\n  return {\n    // eslint-disable-next-line no-use-before-define\n    validate: validateData,\n    // eslint-disable-next-line no-use-before-define\n    validateAt: (data: Object, path: string) => validateDataAt(data, path),\n  };\n\n  function validateData(data: Object): ValidationState {\n    const allPaths = interpolatePaths(schema, data);\n    /**\n     * Basically, we need to clear out the pre-existing validation as it can only\n     * be trigger by data or schema changes which would invalidate the form validations.\n     */\n    const validationsState: ValidationState = {\n      allPaths,\n      allValidations: [],\n      byPath: {},\n    };\n\n    allPaths.forEach(path => {\n      // eslint-disable-next-line no-use-before-define\n      validateDataAt(data, path).forEach((validation: Validation) => {\n        const pathIndexesCleared = clearIndexes(path);\n        if (pathIndexesCleared !== path) {\n          validationsState.byPath[pathIndexesCleared] =\n            validationsState.byPath[pathIndexesCleared] || [];\n          validationsState.byPath[pathIndexesCleared].push(validation);\n        }\n        validationsState.byPath[path] = validationsState.byPath[path] || [];\n        validationsState.byPath[path].push(validation);\n        validationsState.allValidations.push(validation);\n      });\n    });\n\n    return validationsState;\n  }\n\n  function validateDataAt(data: Object, path: string): Validation[] {\n    const pathIndexesCleared = clearIndexes(path);\n    const { invalidationPaths, validate } = schema[path] || schema[pathIndexesCleared];\n    cache[path] = cache[path] || {\n      dependencies: undefined,\n      dependencyValues: undefined,\n      previousValidations: undefined,\n    };\n    const cacheAtPath = cache[path];\n\n    if (!cacheAtPath.dependencies) {\n      const ancestorsPathParts = path.split('.');\n      const indexesMatches = path.match(/(\\[\\d+\\])/g);\n      const indexes = indexesMatches ? indexesMatches.slice() : [];\n      cacheAtPath.dependencies = [path].concat(invalidationPaths).map(invalidationPath => {\n        const absolutePath = getAbsolutePath(ancestorsPathParts, invalidationPath);\n        return indexes.reduce(\n          (finalPath, indexValue, index) => finalPath.replace(`[$${index}]`, indexValue),\n          absolutePath\n        );\n      });\n      cacheAtPath.dependencyValues = Array.from({ length: cacheAtPath.dependencies.length }).map(\n        () => null\n      );\n      cacheAtPath.previousValidations = null;\n    }\n\n    const paths = cacheAtPath.dependencies;\n    const currentDependencyValues: any[] = [];\n    const isChanged = paths.reduce((isOverallChanged, jsonPath, index) => {\n      currentDependencyValues.push(get(data, jsonPath));\n      if (isOverallChanged) {\n        return true;\n      }\n      return currentDependencyValues[index] !== cacheAtPath.dependencyValues[index];\n    }, false);\n\n    /**\n     * Computing validations and returning cache if the invalidations hasn't changed\n     */\n    let validations = null;\n    if (!isChanged && cacheAtPath.previousValidations !== null) {\n      validations = cacheAtPath.previousValidations;\n    } else {\n      validations = validate({\n        data,\n        get,\n        path,\n        value: currentDependencyValues[0],\n        dependencies: currentDependencyValues.slice(1),\n      });\n    }\n\n    /**\n     * Appending computed validations\n     */\n    cacheAtPath.previousValidations = validations;\n    cacheAtPath.dependencyValues = currentDependencyValues;\n\n    return validations;\n  }\n}\n","import { useContext, useMemo } from 'react';\nimport FormFlowDataContext from './FormFlowDataContext';\nimport FormFlowDataType from './FormFlowDataType';\nimport { useObservableState } from './react-state';\nimport AggregatedValidator from './SchemaBuilder/AggregatedValidator';\nimport SchemaValidationMethods from './SchemaBuilder/SchemaValidationMethods';\nimport wrapSchemaWithValidationMethods from './SchemaBuilder/wrapSchemaWithValidationMethods';\n\nexport default function EvaluateValidations() {\n  const observableState = useContext(FormFlowDataContext);\n  const [state] = useObservableState(observableState);\n  const { schemaData, values: data } = state as FormFlowDataType;\n  const schema = useMemo(\n    () =>\n      typeof ((schemaData as any).validate) === 'function'\n        ? schemaData\n        : wrapSchemaWithValidationMethods(schemaData as {\n          [key: string]: AggregatedValidator;\n        }),\n    [schemaData]\n  ) as SchemaValidationMethods;\n  const { validationsState } = observableState.get();\n  /**\n   * Basically, we need to clear out the pre-existing validation as it can only\n   * be trigger by data or schemaData changes which would invalidate the form validations.\n   */\n  const globalValidationCached = schema.validate(data);\n  validationsState.allPaths = globalValidationCached.allPaths;\n  validationsState.allValidations = globalValidationCached.allValidations;\n  validationsState.byPath = globalValidationCached.byPath;\n\n  return null;\n}\n","import hasPathMatched from './hasPathMatched';\nimport Validation from './SchemaBuilder/Validation';\n\nconst EMPTY_LIST: string[] = [];\n\nexport default function isValidByPaths(allValidations: Validation[], paths?: string[]) {\n  const allPaths = paths || EMPTY_LIST;\n  const isAllRequired = allPaths.length === 0;\n\n  if (isAllRequired) {\n    return !allValidations.some(({ isValid }) => !isValid);\n  }\n\n  return !allValidations.some(\n    ({ isValid, path: validationPath }) =>\n      !isValid && allPaths.some(internalPath => hasPathMatched(validationPath, internalPath))\n  );\n}\n","import { clearIndexes } from './validationUtils';\n\n/**\n * Checks if a validated path matches a given path\n * @param {string} validationPath the validated path\n * @param {string} path the path to compare against\n * @returns {boolean}\n */\nexport default function hasPathMatched(validationPath: string, path: string): boolean {\n  return !path || path === validationPath || path === clearIndexes(validationPath);\n}\n","import React, { useCallback, useMemo, useRef } from 'react';\nimport EvaluateValidations from './EvaluateValidations';\nimport FormFlowDataContext from './FormFlowDataContext';\nimport FormFlowDataType from './FormFlowDataType';\nimport isValidByPaths from './isValidByPaths';\nimport { ObservableState } from './react-state';\nimport SchemaData from './SchemaBuilder/SchemaData';\n\ntype FormFlowProviderProps = {\n  /**\n   * React.Node where the form fields are rendered\n   */\n  children: React.ReactElement | React.ReactNode;\n  /**\n    * The initial form data\n    */\n  initialData: Object;\n  /**\n    * The object with validation rules per field\n    */\n  schemaData: SchemaData;\n  /**\n    * Indicates when the data has been created or there was an attempt to create it\n    */\n  isSubmitted?: boolean;\n};\n\nfunction FormFlowProvider({\n  children,\n  initialData,\n  schemaData,\n  isSubmitted = false,\n}: FormFlowProviderProps): React.ReactElement {\n  const initialDataRef = useRef(initialData);\n  const schemaDataRef = useRef(schemaData);\n  const observableState = useMemo(\n    () =>\n      ObservableState.create<FormFlowDataType>({\n        submitCount: isSubmitted ? 1 : 0,\n        dirty: {},\n        initialValues: initialDataRef.current,\n        schemaData: schemaDataRef.current,\n        touched: {},\n        values: initialDataRef.current,\n        validationsState: {\n          allPaths: [],\n          allValidations: [],\n          byPath: {},\n          isAllValid: (paths: string[]) => Boolean(paths),\n        },\n      }),\n    [isSubmitted]\n  );\n  observableState.get().validationsState.isAllValid = useCallback(\n    paths => {\n      const { allValidations } = observableState.get().validationsState;\n      return isValidByPaths(allValidations, paths);\n    },\n    [observableState]\n  );\n\n  return (\n    <FormFlowDataContext.Provider value={observableState}>\n      <EvaluateValidations />\n      <>{children}</>\n    </FormFlowDataContext.Provider>\n  );\n}\n\nexport default React.memo(FormFlowProvider);\n","import ResponseValidationProcessor from './ResponseValidationProcessor';\nimport Validation from './Validation';\nimport ValidationArgs from './ValidationArgs';\nimport ValidationProcessor from './ValidationProcessor';\nimport ValidationProcessorChecker from './ValidationProcessorChecker';\n\n// function defaultResponse(args: ValidationArgs, validationName: string): Partial<Validation> {\nfunction defaultResponse(): Partial<Validation> {\n  return {};\n}\n\nexport default function factoryValidate(\n  validationName: string,\n  isValid: ValidationProcessorChecker,\n  response?: ResponseValidationProcessor\n): ValidationProcessor {\n  return (args: ValidationArgs) => (({\n    ...args,\n    isValid: isValid(args),\n    name: validationName,\n    key: `${args.path}.errors.${validationName}`.replace(/\\[\\d*\\]/g, ''),\n    ...(response || defaultResponse)(args),\n  }) as Validation);\n}\n","import { createValidations } from '../validationUtils';\nimport AggregatedValidator from './AggregatedValidator';\nimport Builder, { BuilderNode } from './Builder';\nimport ExtraArguments from './ExtraArguments';\nimport factoryValidate from './factoryValidate';\nimport ResponseValidationProcessor from './ResponseValidationProcessor';\nimport ValidationArgs from './ValidationArgs';\nimport ValidationProcessor from './ValidationProcessor';\nimport ValidationProcessorChecker from './ValidationProcessorChecker';\nimport ValidationProcessorFactory from './ValidationProcessorFactory';\nimport wrapSchemaWithValidationMethods from './wrapSchemaWithValidationMethods';\n\nconst EMPTY_OBJECT = { response: undefined as any as ResponseValidationProcessor };\nconst DEFAULT_VALIDATION = \"test\" as const;\ntype ValidationMethodsMap = {\n  [key: string]: ValidationProcessorFactory;\n};\nconst validations: ValidationMethodsMap = {};\n\n/**\n * Factories methods to build validations which will be available\n * later in the build schema process\n */\nfunction factory<T extends Object>(validationName: string, isValid: ValidationProcessorChecker, defaultExtraArgs?: ExtraArguments) {\n  if (validations[validationName] || validationName === DEFAULT_VALIDATION) {\n    throw new Error(`The validation \"${validationName}\" already exists, you cannot override it.\nValidations can be manipulated by get(\"${validationName}\"), purge(\"${validationName}\").`);\n  }\n\n  const factoryValidationInternal: ValidationProcessorFactory = (args: ValidationArgs): ValidationProcessor<T> => {\n    const { response: __discard, ...remainingArguments } = args || EMPTY_OBJECT;\n    const response: ResponseValidationProcessor = args?.response || defaultExtraArgs?.response;\n    const validate = factoryValidate(validationName, isValid, response);\n    return (internalArgs: ValidationArgs & T) => validate({ name: validationName, ...internalArgs, ...remainingArguments });\n  };\n  validations[validationName] = factoryValidationInternal;\n}\n\n/**\n * Creates a builder for validations\n */\nfunction builder(): Builder {\n  const schema: { [key: string]: AggregatedValidator } = {};\n  const instance = {\n    /**\n     * Creates the schema\n     * @returns {object}\n     */\n    build: () => wrapSchemaWithValidationMethods(schema),\n    /**\n     * Creates the schema\n     */\n    with: (path: string, invalidationPaths: string[] = []): BuilderNode => {\n      const validationMethods: any[] = [];\n      const newBuilder: BuilderNode = {\n        check: undefined!,\n        end: undefined!,\n        test: (validationName: string,\n          isValid: ValidationProcessorChecker,\n          response?: ResponseValidationProcessor) => {\n          validationMethods.push(factoryValidate(validationName, isValid, response));\n          newBuilder[validationName] = () => {\n            return newBuilder;\n          };\n          return newBuilder;\n        },\n      };\n      Object.entries(validations).forEach(([key, method]) => {\n        if (!newBuilder[key]) {\n          newBuilder[key] = ((...args: any[]) => {\n            const [input] = args as [ValidationArgs & ExtraArguments];\n            validationMethods.push(method(input));\n            return newBuilder;\n          }) as Function;\n        }\n      });\n      /**\n       * Finish validation to a path and returns to builder\n       */\n      function check<T>(validationName: string, extraArguments?: Partial<ExtraArguments> & T): BuilderNode {\n        newBuilder[validationName as any](extraArguments);\n        return newBuilder;\n      }\n      newBuilder.check = check;\n      /**\n       * Finish validation to a path and returns to builder\n       */\n      function end() {\n        schema[path] = createValidations(invalidationPaths, ...validationMethods) as AggregatedValidator;\n        return instance as any as Builder;\n      }\n      newBuilder.end = end;\n\n      return newBuilder;\n    },\n  };\n\n  return instance as any as Builder;\n}\n\n/**\n * Gets a list of validation names to be purged\n */\nfunction getPurgedList(validationNames?: string | string[]): string[] {\n  const isTryingToRemoveTest =\n    validationNames === 'test' ||\n    (validationNames &&\n      (validationNames as string[]).some &&\n      (validationNames as string[]).some((validationName: string) => validationName === 'test'));\n  if (isTryingToRemoveTest) {\n    throw new Error('\"test\" cannot be purged. It is a fundamental validation.');\n  }\n\n  if (Array.isArray(validationNames)) {\n    return validationNames;\n  }\n\n  if (validationNames === undefined) {\n    return Object.keys(validations).filter(validation => validation !== 'test');\n  }\n\n  if (typeof validationNames === 'string') {\n    return [validationNames];\n  }\n\n  throw new Error('Argument \"validationNames\" can only be string, array or undefined.');\n}\n\nexport default Object.freeze({\n  /**\n   * Initialize the builder for schema\n   */\n  builder,\n  /**\n   * Factory validations to accessed in the builder\n   */\n  factory,\n  get: (validationName: string) => validationName === DEFAULT_VALIDATION ? factoryValidate : validations[validationName],\n  /**\n   * Purges validations\n   */\n  purge: (validationNames?: string|Array<string>): { [key: string]: ValidationProcessorFactory } => {\n    const validationNamesToRemove = getPurgedList(validationNames);\n    const removed: ValidationMethodsMap = {};\n    validationNamesToRemove.forEach(validationName => {\n      removed[validationName] = validations[validationName];\n      delete validations[validationName];\n    });\n\n    return removed;\n  },\n});\n","import { useContext, useMemo } from 'react';\nimport { get } from './accessor';\nimport FormFlowDataContext from './FormFlowDataContext';\nimport { useObservableState } from './react-state';\nimport { clearIndexes } from './validationUtils';\n\nconst ACCEPTABLE_TYPES = ['boolean', typeof undefined];\n\nfunction getBooleanFromMapPath(map: any): boolean {\n  const type = typeof map;\n  if (ACCEPTABLE_TYPES.includes(type)) return !!map;\n  return Object.values(map).some(possibleBoolean => getBooleanFromMapPath(possibleBoolean));\n}\n\nconst isFormDirty = getBooleanFromMapPath;\nconst isFormTouched = getBooleanFromMapPath;\n\nconst EMPTY_LIST: any[] = [];\n/**\n * Perform validation over the form data based on the path provided\n */\nexport default function useFormFlowValidation(path = '') {\n  const observableState = useContext(FormFlowDataContext);\n  const [metadata] = useObservableState(observableState);\n  const {\n    dirty: mapDirty,\n    submitCount,\n    touched: mapTouched,\n    validationsState: { allValidations, byPath, isAllValid },\n    values: data,\n  } = metadata;\n  const pathIndexesCleared = clearIndexes(path);\n  const validations = path\n    ? byPath[path] || byPath[pathIndexesCleared] || EMPTY_LIST\n    : allValidations;\n  const isArrayWithNoIndex = pathIndexesCleared === path && path.includes('[]');\n  const initialMapDirty = useMemo(() => {\n    if (isArrayWithNoIndex) {\n      return false;\n    }\n    return path ? get(mapDirty, path) : mapDirty;\n  }, [isArrayWithNoIndex, mapDirty, path]);\n  const initialMapTouched = useMemo(() => {\n    if (isArrayWithNoIndex) {\n      return false;\n    }\n    return path ? get(mapTouched, path) : mapTouched;\n  }, [isArrayWithNoIndex, mapTouched, path]);\n  const dirty = useMemo(() => isFormDirty(initialMapDirty), [initialMapDirty]);\n  const touched = useMemo(() => isFormTouched(initialMapTouched), [initialMapTouched]);\n\n  return {\n    submitted: submitCount > 0,\n    data,\n    dirty,\n    touched,\n    isAllValid,\n    validations,\n  };\n}\n","import { useCallback, useContext, useMemo } from 'react';\nimport { get } from './accessor';\nimport FormFlowDataContext from './FormFlowDataContext';\nimport FormFlowDataType from './FormFlowDataType';\nimport { useObservableState } from './react-state';\nimport Validation from './SchemaBuilder/Validation';\nimport useFormFlow from './useFormFlow';\nimport useFormFlowValidation from './useFormFlowValidation';\n\ntype FormFlowItem<T = any> = {\n  data: Object;\n  dirty: boolean;\n  onBlur: (e: Event) => void;\n  onChange?: (e: Event) => void;\n  onChangeValue?: (value: any) => void;\n  setData: (transformer: (v: FormFlowDataType) => FormFlowDataType) => void;\n  submitted: boolean;\n  touched: boolean;\n  validations: Validation[];\n  value: T;\n};\n\n/**\n * Obtains values and validation from a form based on a json path\n */\nexport default function useFormFlowItem<T = any>(path?: string): FormFlowItem<T> {\n  const observableState = useContext(FormFlowDataContext);\n  const [metadata, setMetadata] = useObservableState(observableState);\n  const { validations, touched, dirty, submitted } = useFormFlowValidation(path);\n  const { onChangeByPath, onBlurByPath } = useFormFlow();\n  const data = metadata.values;\n  const setData = useCallback(\n    values => {\n      setMetadata(oldMetadata => ({\n        ...oldMetadata,\n        values,\n      }));\n    },\n    [setMetadata]\n  );\n  const onChangeValue = useCallback(\n    value => {\n      onChangeByPath(path, value);\n    },\n    [path, onChangeByPath]\n  );\n  const onBlur = useCallback(() => {\n    onBlurByPath(path);\n  }, [onBlurByPath, path]);\n  const onChange = useCallback(\n    e => {\n      onChangeByPath(path, e.target.value);\n    },\n    [onChangeByPath, path]\n  );\n  const value = useMemo(() => (path ? get(data, path) : data), [data, path]);\n\n  return {\n    data,\n    dirty,\n    onBlur,\n    onChangeValue,\n    onChange,\n    setData,\n    submitted,\n    touched,\n    validations,\n    value,\n  };\n}\n","import { useCallback, useContext } from 'react';\nimport { get, set } from './accessor';\nimport FormFlowDataContext from './FormFlowDataContext';\nimport FormFlowDataType from './FormFlowDataType';\n\n/**\n * Creates a memoized Provider component to be used as form\n */\nexport default function useFormFlow() {\n  const observableState = useContext(FormFlowDataContext);\n  const onBlurByPath = useCallback(\n    path => {\n      observableState.set(oldData => {\n        const isTouched = get(oldData, `touched.${path}`);\n        if (!isTouched) {\n          return set(oldData, `touched.${path}`, true) as FormFlowDataType;\n        }\n\n        return oldData;\n      });\n    },\n    [observableState]\n  );\n  const onChangeByPath = useCallback(\n    (path, value) => {\n      observableState.set(oldData => {\n        const oldValue = get(oldData, `values.${path}`);\n        const isDirtyOld = get(oldData, `dirty.${path}`);\n        const isDirty = (oldValue || '') !== value;\n        if (oldValue === value && isDirtyOld === isDirty) {\n          return oldData;\n        }\n\n        return set(set(oldData, `dirty.${path}`, isDirty), `values.${path}`, value) as FormFlowDataType;\n      });\n    },\n    [observableState]\n  );\n\n  return {\n    data: observableState.get(),\n    onBlurByPath,\n    onChangeByPath,\n    setData: observableState.set,\n  };\n}\n","import { useCallback, useMemo } from 'react';\nimport Validation from './SchemaBuilder/Validation';\nimport useFormFlowItem from './useFormFlowItem';\n\nconst Types = {\n  Event: 'event',\n  Value: 'value',\n};\nconst DEFAULT_OPTIONS = {\n  onBlur: () => true,\n  onChange: () => true,\n  onChangeValue: () => true,\n  eventType: Types.Event,\n};\n\nexport type MetadataField = {\n  onBlur?: <T>(e: T) => void;\n  onChange?: <T>(e: T) => void;\n  onChangeValue?: (value: any) => void;\n  eventType?: 'event' | 'value';\n};\n\nexport type Field = {\n  onBlur?: <T>(e: T) => void;\n  onChange?: <T>(e: T) => void;\n  onChangeValue?: (value: any) => void;\n};\n\nexport type FormFlowField = {\n  dirty: boolean;\n  errors: Validation[];\n  field: Field;\n  submitted: boolean;\n  touched: boolean;\n};\n\nfunction useFormFlowField(path: string): FormFlowField;\nfunction useFormFlowField(path: string, options: MetadataField): FormFlowField\n/**\n * Obtains values and validation from a form based on a json path\n * @returns {{ field: object, errors: Array }}\n */\nfunction useFormFlowField(path: string, options?: MetadataField): FormFlowField {\n  const { dirty, value, validations, submitted, touched, ...metadata } = useFormFlowItem(path);\n  const metadataOptions = {\n    ...DEFAULT_OPTIONS,\n    ...(options || DEFAULT_OPTIONS),\n  };\n  const blur = metadataOptions.onBlur;\n  const change = metadataOptions.onChange;\n  const changeValue = metadataOptions.onChangeValue;\n  const blurForm = metadata.onBlur;\n  const changeForm = metadata.onChange;\n  const changeValueForm = metadata.onChangeValue;\n\n  const onBlur = useCallback(\n    e => {\n      blur(e);\n      blurForm(e);\n    },\n    [blur, blurForm]\n  );\n  const onChange = useCallback(\n    e => {\n      change(e);\n      if (changeForm) changeForm(e);\n    },\n    [change, changeForm]\n  );\n  const onChangeValue = useCallback(\n    val => {\n      changeValue(val);\n      if (changeValueForm) changeValueForm(val);\n    },\n    [changeValue, changeValueForm]\n  );\n  const errors = useMemo(() => validations.filter(({ isValid }) => !isValid), [validations]);\n  const field =\n    metadataOptions.eventType === Types.Event\n      ? { onBlur, onChange, value }\n      : { onBlur, onChangeValue, value };\n\n  return { dirty, errors, field, submitted, touched };\n}\n\nexport default useFormFlowField;\n","import React, { useCallback, useContext, useRef } from 'react';\nimport FormFlowDataContext from './FormFlowDataContext';\n\nexport interface Resetable {\n  reset: () => void;\n}\nexport type ResetForm<T> = {\n  onReset: () => void;\n  ref: React.RefObject<T>;\n};\n\n/**\n * Creates reset form props\n */\nexport default function useResetForm<T extends HTMLFormElement>(): ResetForm<T> {\n  const observableState = useContext(FormFlowDataContext);\n  const ref = useRef<T>(null);\n  const onReset = useCallback(() => {\n    if (ref.current) (ref.current as HTMLFormElement).reset();\n    observableState.set(metadata => ({\n      ...metadata,\n      values: metadata.initialValues,\n    }));\n  }, [observableState]);\n\n  return { onReset, ref };\n}\n","import { FormEvent, FormEventHandler, useCallback, useContext } from 'react';\nimport FormFlowDataContext from './FormFlowDataContext';\nimport isValidByPaths from './isValidByPaths';\nimport ValidationState from './SchemaBuilder/ValidationState';\n\ntype SubmissionMetadata = ValidationState & { isValid: boolean; e: FormEvent };\ntype SubmitHandler = (values: any, metadata: SubmissionMetadata) => void;\n\n/**\n * Creates properties to handle form submission\n */\nexport default function useSubmitForm(submit: SubmitHandler): { onSubmit: FormEventHandler<HTMLFormElement> } {\n  const observableState = useContext(FormFlowDataContext);\n  const onSubmit = useCallback(\n    async e => {\n      e.preventDefault();\n      const { values, validationsState } = observableState.get();\n      const { allValidations } = validationsState;\n      const isValid = isValidByPaths(allValidations);\n      observableState.set(oldData => ({\n        ...oldData,\n        submitCount: oldData.submitCount + 1,\n      }));\n\n      await submit(values, { ...validationsState, isValid, e });\n\n      return false;\n    },\n    [observableState, submit]\n  );\n\n  return { onSubmit };\n}\n","import dispatchChange from './dispatchChange';\nimport FormFlowProvider from './FormFlowProvider';\nimport SchemaBuilder from './SchemaBuilder/SchemaBuilder';\nimport useFormFlowField from './useFormFlowField';\nimport useFormFlowItem from './useFormFlowItem';\nimport useFormFlowValidation from './useFormFlowValidation';\nimport useResetForm from './useResetForm';\nimport useSubmitForm from './useSubmitForm';\nimport { createValidations } from './validationUtils';\n\nexport { dispatchChange };\nexport { FormFlowProvider };\nexport { useFormFlowField };\nexport { useFormFlowItem };\nexport { useFormFlowValidation };\nexport { useResetForm };\nexport { useSubmitForm };\nexport { createValidations };\nexport { SchemaBuilder };\n\nexport default FormFlowProvider;\n","export default function hasValue(value) {\n  return (\n    value !== null && value !== undefined && (typeof value !== 'string' || (value && value.trim()))\n  );\n}\n","import React from 'react';\nimport CodeEditor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\n\ntype EditorProps = {\n  value: string;\n  onChangeValue: (value: string) => void;\n}\n\nexport default function Editor({ value = '', onChangeValue }: EditorProps): React.ReactElement {\n  return (\n    <CodeEditor\n      value={value}\n      onValueChange={onChangeValue}\n      highlight={code => highlight(code, languages.javascript, \"javascript\")}\n      padding={10}\n      style={{\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n        fontSize: 12,\n      }}\n    />\n  );\n}","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport Validation from '../react-form-flow-examples/fields/Validation';\nimport { FormFlowProvider, useFormFlowItem, useFormFlowValidation } from '../src';\nimport ValidationType from '../src/SchemaBuilder/Validation';\n\nfunction UpdateData({ data }) {\n  const { setData } = useFormFlowItem();\n\n  useEffect(() => {\n    setData(data);\n  }, [data, setData]);\n\n  return null;\n}\n\nconst ValidationsLayout = styled.div`\n  hr:last-child {\n    display: none;\n  }\n`;\n\nfunction Validations() {\n  const { validations } = useFormFlowValidation() as { validations: ValidationType[] };\n  \n\n  return (\n    <ValidationsLayout>\n      {Array.from(new Set(validations.map((validation) => validation.path)).values()).map(jsonPath => (\n        <React.Fragment key={jsonPath}>\n          <Validation\n            isColored\n            key={jsonPath}\n            label={jsonPath}\n            errors={validations.filter(({ path, isValid }) => jsonPath === path && !isValid)}\n          />\n          <hr />\n        </React.Fragment>\n      ))}\n    </ValidationsLayout>\n  );\n}\n\nexport default function RecipesValidations({ data, schemaData }) {\n  return (\n    <FormFlowProvider initialData={data} schemaData={schemaData}>\n      <h2>Try change the validations or the data in the console below...</h2>\n      <UpdateData data={data} />\n      <Validations />\n    </FormFlowProvider>\n  );\n}\n\nRecipesValidations.propTypes = {\n  data: PropTypes.shape({}).isRequired,\n  schemaData: PropTypes.shape({}).isRequired,\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport hasValue from '../react-form-flow-examples/validationRecipes/hasValue';\nimport { SchemaBuilder } from '../src';\nimport Editor from '../tools/helpers/components/Editor';\nimport RecipesValidations from './RecipesValidations';\n\nexport function decode(text) {\n  const parser = document.createElement('div');\n\n  parser.innerHTML = text;\n  return parser.textContent;\n}\n\nexport default function RecipesSchemaBuilder({ data: dataProps, schemaData: schemaDataProps }) {\n  const [_schemaData, set_schemaData] = useState(schemaDataProps || schemaData);\n  const schemaDataObject = useMemo(() => {\n    const getSchemaData = new Function(\n      'SchemaBuilder',\n      'hasValue',\n      decode(_schemaData)\n    );\n    return getSchemaData(SchemaBuilder, hasValue);\n  }, [_schemaData]);\n  const [_schemaDataObjectSaved, set_schemaDataObjectSaved] = useState(schemaDataObject);\n  const onUpdateCode = useCallback(() => {\n    set_schemaDataObjectSaved(null);\n    setTimeout(() => void set_schemaDataObjectSaved(schemaDataObject), 300);\n  }, [schemaDataObject]);\n\n  return (\n    _schemaDataObjectSaved != null && (\n      <>\n        <fieldset>\n          <legend>Assumed SchemaBuilder and hasValue are available...</legend>\n          <code>{'import { SchemaBuilder } from \"react-form-flow\";'}</code>\n          <code>\n            <pre>\n              {`\nexport default function hasValue(value) {\n  return (\n    value !== null && value !== undefined && (typeof value !== 'string' || (value && value.trim()))\n  );\n}           \n              `}\n            </pre>\n          </code>\n        </fieldset>\n        <fieldset>\n          <legend>Body of getShemaData(SchemaBuilder, hasValue)</legend>\n          <Editor value={_schemaData} onChangeValue={set_schemaData} />\n        </fieldset>\n        <div>\n          <button type=\"button\" onClick={onUpdateCode}>Update Code</button>\n        </div>\n        <RecipesValidations data={dataProps} schemaData={_schemaDataObjectSaved} />\n      </>\n    )\n  );\n}\n\nexport const data = {\n  \"name\": \"\",\n  \"description\": \"\",\n  \"passport\": {\n    \"visa\": {\n      \"value\": 3,\n      \"unit\": \"days\"\n    }\n  }\n};\nexport const schemaData = `\n\n/** \n * Once you factory it, you can use as many times as you want via \"check\"\n **/\nif (!SchemaBuilder.get(\"string.required\")) {\n  SchemaBuilder.factory(\"string.required\", (metadata) => hasValue(metadata.value));\n}\n\n/** \n * You can provide extra arguments such as message, or use some translation library to\n * transform the property \"key\" returned into a message.\n **/\nreturn SchemaBuilder.builder()\n  .with(\"name\", [])\n  .check(\"string.required\")\n  .end()\n  .with(\"description\", [])\n  .check(\"string.required\", { message: \"Description is required\" })\n  .end()\n  .build();\n\n`.trim();\n"],"sourceRoot":""}